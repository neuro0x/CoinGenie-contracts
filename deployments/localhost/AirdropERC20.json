{
  "address": "0x96E303b6D807c0824E83f954784e2d6f3614f167",
  "abi": [
    {
      "inputs": [],
      "name": "InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRecipients",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotERC20",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenAddressZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AirdropFailed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NATIVE_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AirdropERC20.AirdropContent[]",
          "name": "contents",
          "type": "tuple[]"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfd9428d56b5fd799a79c1d776838990fd37195a571130a7bb63e132322720f87",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x96E303b6D807c0824E83f954784e2d6f3614f167",
    "transactionIndex": 0,
    "gasUsed": "519881",
    "logsBloom": "0x
    "blockHash": "0x52354d35b3f81e10926bf6734f15223ef46a4962a3f6a40c5a6fda80b935c03e",
    "transactionHash": "0xfd9428d56b5fd799a79c1d776838990fd37195a571130a7bb63e132322720f87",
    "logs": [],
    "blockNumber": 18187064,
    "cumulativeGasUsed": "519881",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "7fe85e3476b006785ecba9d1f536544c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRecipients\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotERC20\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAddressZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropFailed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AirdropERC20.AirdropContent[]\",\"name\":\"contents\",\"type\":\"tuple[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@neuro_0x\",\"details\":\"A contract for distributing ERC20 tokens to a list of recipients.\",\"events\":{\"AirdropFailed(address,address,address,uint256)\":{\"details\":\"Emitted when an failed airdrop occurs.\"}},\"kind\":\"dev\",\"methods\":{\"airdrop(address,address,(address,uint256)[])\":{\"details\":\"needs Approval\",\"params\":{\"contents\":\"A list of recipients and amounts for the airdrop.\",\"tokenAddress\":\"The address of the token to be airdropped.\",\"tokenOwner\":\"The address of the token owner initiating the airdrop.\"}}},\"stateVariables\":{\"NATIVE_TOKEN\":{\"details\":\"The address of the native token (ETH).\"}},\"title\":\"AirdropERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"airdrop(address,address,(address,uint256)[])\":{\"notice\":\"Allows the user to distribute ERC20 tokens to a list of addresses.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/AirdropERC20.sol\":\"AirdropERC20\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363935333336333037313732\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"src/AirdropERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\nimport { ReentrancyGuard } from \\\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IERC20 } from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { SafeTransfer } from \\\"./lib/SafeTransfer.sol\\\";\\n\\n/**\\n * @title AirdropERC20\\n * @author @neuro_0x\\n * @dev A contract for distributing ERC20 tokens to a list of recipients.\\n */\\ncontract AirdropERC20 is ReentrancyGuard {\\n    error NoRecipients();\\n    error TokenAddressZero();\\n    error NotERC20();\\n    error InsufficientBalance();\\n    error InsufficientAllowance();\\n\\n    /// @dev The address of the native token (ETH).\\n    address public constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @dev Emitted when an failed airdrop occurs.\\n    event AirdropFailed(\\n        address indexed tokenAddress, address indexed tokenOwner, address indexed recipient, uint256 amount\\n    );\\n\\n    /**\\n     * @dev Details of amount and recipient for airdropped token.\\n     * @param recipient The recipient of the tokens.\\n     * @param amount The quantity of tokens to airdrop.\\n     */\\n    struct AirdropContent {\\n        address recipient;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @notice Allows the user to distribute ERC20 tokens to a list of addresses.\\n     * @param tokenAddress The address of the token to be airdropped.\\n     * @param tokenOwner The address of the token owner initiating the airdrop.\\n     * @param contents A list of recipients and amounts for the airdrop.\\n     *\\n     * @dev needs Approval\\n     *\\n     */\\n    function airdrop(\\n        address tokenAddress,\\n        address tokenOwner,\\n        AirdropContent[] calldata contents\\n    )\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        if (contents.length == 0) {\\n            revert NoRecipients();\\n        }\\n\\n        if (tokenAddress == address(0)) {\\n            revert TokenAddressZero();\\n        }\\n\\n        if (tokenAddress == NATIVE_TOKEN) {\\n            revert NotERC20();\\n        }\\n\\n        uint256 len = contents.length;\\n        for (uint256 i = 0; i < len;) {\\n            // Attempt to transfer the specified amount of tokens to the recipient\\n            bool success =\\n                _transferCurrencyWithReturnVal(tokenAddress, tokenOwner, contents[i].recipient, contents[i].amount);\\n\\n            if (!success) {\\n                // Log the failed transfer\\n                emit AirdropFailed(tokenAddress, tokenOwner, contents[i].recipient, contents[i].amount);\\n            }\\n\\n            // Increment the counter\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to transfer the specified currency (either ERC20 or native) from the sender to the recipient.\\n     * @param _currency The address of the currency to be transferred.\\n     * @param _from The sender's address.\\n     * @param _to The recipient's address.\\n     * @param _amount The amount to be transferred.\\n     * @return success A boolean indicating if the transfer was successful.\\n     */\\n    function _transferCurrencyWithReturnVal(\\n        address _currency,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    )\\n        private\\n        returns (bool success)\\n    {\\n        // If _amount is zero, return true\\n        if (_amount == 0) {\\n            success = true;\\n            return success;\\n        }\\n\\n        // Attempt to transfer if the currency is the native token (ETH)\\n        if (_currency == NATIVE_TOKEN) {\\n            (success,) = _to.call{ value: _amount }(\\\"\\\");\\n        } else {\\n            // Attempt to transfer if the currency is an ERC20 token\\n            (bool success_, bytes memory data_) = // solhint-disable-next-line avoid-low-level-calls\\n             _currency.call(abi.encodeWithSelector(IERC20.transferFrom.selector, _from, _to, _amount));\\n\\n            success = success_;\\n\\n            // If the transfer failed, check the allowance and balance\\n            if (!success || (data_.length > 0 && !abi.decode(data_, (bool)))) {\\n                success = false;\\n\\n                if (IERC20(_currency).balanceOf(_from) < _amount) {\\n                    revert InsufficientBalance();\\n                }\\n\\n                if (IERC20(_currency).allowance(_from, address(this)) < _amount) {\\n                    revert InsufficientAllowance();\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers ERC20 tokens from the sender to the recipient.\\n     * @param _currency The address of the ERC20 token to be transferred.\\n     * @param _from The sender's address.\\n     * @param _to The recipient's address.\\n     * @param _amount The amount to be transferred.\\n     */\\n    function _safeTransferERC20(address _currency, address _from, address _to, uint256 _amount) private {\\n        // if _from is _to, return\\n        if (_from == _to) {\\n            return;\\n        }\\n\\n        // If _from is the contract, transfer the ERC20 token\\n        if (_from == address(this)) {\\n            SafeTransfer.safeTransfer(_currency, _to, _amount);\\n        } else {\\n            // Otherwise, transfer the ERC20 token via the allowance mechanism\\n            SafeTransfer.safeTransferFrom(_currency, _from, _to, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2efb9d174663edf6d1b50934f588aff94be4c66108c20cbd5cd6e2c012d17b8f\",\"license\":\"GPL-3.0\"},\"src/lib/SafeTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\nlibrary SafeTransfer {\\n    error TransferFailed();\\n\\n    /**\\n     * @dev Sends `amount` (in wei) ETH to `to`.\\n     * @param to The address to send the ETH to.\\n     * @param amount The amount of ETH to send.\\n     */\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gas(), to, amount, 0, 0, 0, 0)) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                // bytes4(keccak256(bytes(\\\"ETHTransferFailed()\\\"))) = 0xb12d13eb\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Validates that the address is not the zero address using assembly.\\n     * @dev Reverts if the address is the zero address.\\n     * @param addr The address to validate.\\n     */\\n    function validateAddress(address addr) internal pure {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            if iszero(shl(96, addr)) {\\n                // Store the function selector of `ZeroAddress()`.\\n                // bytes4(keccak256(bytes(\\\"ZeroAddress()\\\"))) = 0xd92e233d\\n                mstore(0x00, 0xd92e233d)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to transfer ERC20 tokens without the need for SafeERC20.\\n     * @dev Reverts if the ERC20 transfer fails.\\n     * @param tokenAddress The address of the ERC20 token.\\n     * @param from The address to transfer the tokens from.\\n     * @param to The address to transfer the tokens to.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function safeTransferFrom(address tokenAddress, address from, address to, uint256 amount) internal returns (bool) {\\n        (bool success, bytes memory data) =\\n        // solhint-disable-next-line avoid-low-level-calls\\n         tokenAddress.call(abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", from, to, amount));\\n        if (!success) {\\n            if (data.length != 0) {\\n                // bubble up error\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(data)\\n                    revert(add(32, data), returndata_size)\\n                }\\n            } else {\\n                revert TransferFailed();\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Helper function to transfer ERC20 tokens without the need for SafeERC20.\\n    /// @dev Reverts if the ERC20 transfer fails.\\n    /// @param tokenAddress The address of the ERC20 token.\\n    /// @param to The address to transfer the tokens to.\\n    /// @param amount The amount of tokens to transfer.\\n    function safeTransfer(address tokenAddress, address to, uint256 amount) internal returns (bool) {\\n        (bool success, bytes memory data) =\\n        // solhint-disable-next-line avoid-low-level-calls\\n         tokenAddress.call(abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", to, amount));\\n        if (!success) {\\n            if (data.length != 0) {\\n                // bubble up error\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(data)\\n                    revert(add(32, data), returndata_size)\\n                }\\n            } else {\\n                revert TransferFailed();\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xcd0139a88ea2bcaa2dc562192f25f6fe7e18dc526081b42f9c1f8ef47a6aefa9\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523461002257610011610027565b604051610804610072823961080490f35b600080fd5b61002f61005f565b565b61003e61003e61003e9290565b90565b61003e6001610031565b9061003e61003e61005b92610031565b9055565b61002f61006a610041565b600061004b56fe6080604052600436101561001257600080fd5b60003560e01c806331f7d964146100325763da26dbf1036100375761011c565b610058565b600080fd5b600091031261003757565b90565b6001600160a01b031690565b565b346100375761006836600461003c565b60405173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8152602090f35b6001600160a01b0381165b0361003757565b9050359061005682610087565b909182601f830112156100375781359167ffffffffffffffff831161003757602001926040830284011161003757565b91606083830312610037576100eb8284610099565b926100f98360208301610099565b92604082013567ffffffffffffffff81116100375761011892016100a6565b9091565b61013361012a3660046100d6565b92919091610375565b604051005b9061014c9392916101476103fc565b6101e2565b610056610438565b6100476100476100479290565b61004a6100476100479290565b61004790610161565b634e487b7160e01b600052603260045260246000fd5b919081101561019d576040020190565b610177565b3561004781610087565b80610092565b35610047816101ac565b6100479061004a906001600160a01b031682565b610047906101bc565b610047906101d0565b929392919084936000906101f582610154565b86146103635761020761004a8361016e565b6001600160a01b038616146103515773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0386161461033f5761024382610154565b865b811015610335576102ab81898188876102946102908d6102738461026d6102459c8a8961018d565b016101a2565b8d61028a60206102848a8c8b61018d565b016101b2565b92610561565b1590565b6102b2575b505050506102a76001610154565b0190565b9050610243565b826102ca6102849261026d6102d1968860209761018d565b948c61018d565b907f35be58330abb60221820bfd214bb857a6ea979dbf24009982022925a7fc137ff6102fc8b6101d9565b9061032961031261030c8c6101d9565b946101d9565b9461031c60405190565b9182918290815260200190565b0390a489818887610299565b5095505050505050565b604051635e81097b60e01b8152600490fd5b6040516381c609f760e01b8152600490fd5b6040516348e0555160e11b8152600490fd5b90610056939291610138565b6100479081565b6100479054610381565b6100476002610154565b156103a357565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b906100476100476103f892610154565b9055565b6100566104096000610388565b610427610414610392565b918290610420565b9190565b141561039c565b60006103e8565b6100476001610154565b61005661042761042e565b6001600160a01b039182168152911660208201526060810192916100569160400152565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761049f57604052565b610467565b906100566104b160405190565b928361047d565b67ffffffffffffffff811161049f57602090601f01601f19160190565b906104e76104e2836104b8565b6104a4565b918252565b3d15610506576104fb3d6104d5565b903d6000602084013e565b606090565b801515610092565b905051906100568261050b565b906020828203126100375761004791610513565b90505190610056826101ac565b906020828203126100375761004791610534565b6040513d6000823e3d90fd5b9190939261056d600090565b5060009261057a84610154565b82146107c45773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b038216036105c55750829394506105b260405190565b90818003925af16105c16104ec565b5090565b9280600461060482956105f5866323b872dd60e01b928c6105e560405190565b9687956020870190815201610443565b6020820181038252038261047d565b80519060200182875af1946106176104ec565b861590811561077b575b5061062d575b50505050565b909192945061064461063f84966101d9565b6101d9565b906370a0823161065d61065660405190565b9160e01b90565b81526001600160a01b0382166004820152602081602481865afa90811561074657859161075d575b50831161074b5760209063dd62ed3e926106bb6106a1306101d9565b946106da6106ae60405190565b9687958694859460e01b90565b84526001600160a01b0390811660048501521660248301526044820190565b03915afa928315610746579261070e575b50905b106106fc5738808080610627565b6040516313be252b60e01b8152600490fd5b6106ee91925061073761041c9160203d811161073f575b61072f818361047d565b810190610541565b9291506106eb565b503d610725565b610555565b604051631e9acf1760e31b8152600490fd5b610775915060203d811161073f5761072f818361047d565b38610685565b9050610785815190565b61079161041c86610154565b1190816107a0575b5038610621565b6107be91508060206107b3610290935190565b818301019101610520565b38610799565b506001945050505056fea2646970667358221220d137113f1673f1296765f642e986625d3909de985da3f7793908fd10c5a3b20964736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806331f7d964146100325763da26dbf1036100375761011c565b610058565b600080fd5b600091031261003757565b90565b6001600160a01b031690565b565b346100375761006836600461003c565b60405173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8152602090f35b6001600160a01b0381165b0361003757565b9050359061005682610087565b909182601f830112156100375781359167ffffffffffffffff831161003757602001926040830284011161003757565b91606083830312610037576100eb8284610099565b926100f98360208301610099565b92604082013567ffffffffffffffff81116100375761011892016100a6565b9091565b61013361012a3660046100d6565b92919091610375565b604051005b9061014c9392916101476103fc565b6101e2565b610056610438565b6100476100476100479290565b61004a6100476100479290565b61004790610161565b634e487b7160e01b600052603260045260246000fd5b919081101561019d576040020190565b610177565b3561004781610087565b80610092565b35610047816101ac565b6100479061004a906001600160a01b031682565b610047906101bc565b610047906101d0565b929392919084936000906101f582610154565b86146103635761020761004a8361016e565b6001600160a01b038616146103515773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0386161461033f5761024382610154565b865b811015610335576102ab81898188876102946102908d6102738461026d6102459c8a8961018d565b016101a2565b8d61028a60206102848a8c8b61018d565b016101b2565b92610561565b1590565b6102b2575b505050506102a76001610154565b0190565b9050610243565b826102ca6102849261026d6102d1968860209761018d565b948c61018d565b907f35be58330abb60221820bfd214bb857a6ea979dbf24009982022925a7fc137ff6102fc8b6101d9565b9061032961031261030c8c6101d9565b946101d9565b9461031c60405190565b9182918290815260200190565b0390a489818887610299565b5095505050505050565b604051635e81097b60e01b8152600490fd5b6040516381c609f760e01b8152600490fd5b6040516348e0555160e11b8152600490fd5b90610056939291610138565b6100479081565b6100479054610381565b6100476002610154565b156103a357565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b906100476100476103f892610154565b9055565b6100566104096000610388565b610427610414610392565b918290610420565b9190565b141561039c565b60006103e8565b6100476001610154565b61005661042761042e565b6001600160a01b039182168152911660208201526060810192916100569160400152565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761049f57604052565b610467565b906100566104b160405190565b928361047d565b67ffffffffffffffff811161049f57602090601f01601f19160190565b906104e76104e2836104b8565b6104a4565b918252565b3d15610506576104fb3d6104d5565b903d6000602084013e565b606090565b801515610092565b905051906100568261050b565b906020828203126100375761004791610513565b90505190610056826101ac565b906020828203126100375761004791610534565b6040513d6000823e3d90fd5b9190939261056d600090565b5060009261057a84610154565b82146107c45773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b038216036105c55750829394506105b260405190565b90818003925af16105c16104ec565b5090565b9280600461060482956105f5866323b872dd60e01b928c6105e560405190565b9687956020870190815201610443565b6020820181038252038261047d565b80519060200182875af1946106176104ec565b861590811561077b575b5061062d575b50505050565b909192945061064461063f84966101d9565b6101d9565b906370a0823161065d61065660405190565b9160e01b90565b81526001600160a01b0382166004820152602081602481865afa90811561074657859161075d575b50831161074b5760209063dd62ed3e926106bb6106a1306101d9565b946106da6106ae60405190565b9687958694859460e01b90565b84526001600160a01b0390811660048501521660248301526044820190565b03915afa928315610746579261070e575b50905b106106fc5738808080610627565b6040516313be252b60e01b8152600490fd5b6106ee91925061073761041c9160203d811161073f575b61072f818361047d565b810190610541565b9291506106eb565b503d610725565b610555565b604051631e9acf1760e31b8152600490fd5b610775915060203d811161073f5761072f818361047d565b38610685565b9050610785815190565b61079161041c86610154565b1190816107a0575b5038610621565b6107be91508060206107b3610290935190565b818301019101610520565b38610799565b506001945050505056fea2646970667358221220d137113f1673f1296765f642e986625d3909de985da3f7793908fd10c5a3b20964736f6c63430008140033",
  "devdoc": {
    "author": "@neuro_0x",
    "details": "A contract for distributing ERC20 tokens to a list of recipients.",
    "events": {
      "AirdropFailed(address,address,address,uint256)": {
        "details": "Emitted when an failed airdrop occurs."
      }
    },
    "kind": "dev",
    "methods": {
      "airdrop(address,address,(address,uint256)[])": {
        "details": "needs Approval",
        "params": {
          "contents": "A list of recipients and amounts for the airdrop.",
          "tokenAddress": "The address of the token to be airdropped.",
          "tokenOwner": "The address of the token owner initiating the airdrop."
        }
      }
    },
    "stateVariables": {
      "NATIVE_TOKEN": {
        "details": "The address of the native token (ETH)."
      }
    },
    "title": "AirdropERC20",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "airdrop(address,address,(address,uint256)[])": {
        "notice": "Allows the user to distribute ERC20 tokens to a list of addresses."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 231,
        "contract": "src/AirdropERC20.sol:AirdropERC20",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}