{
  "address": "0x837a41023CF81234f89F956C94D676918b4791c1",
  "abi": [
    {
      "inputs": [],
      "name": "GenieAlreadySet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isBurnable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isPausable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isDeflationary",
              "type": "bool"
            }
          ],
          "internalType": "struct Common.TokenConfigProperties",
          "name": "customConfigProps",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "maxPerWallet",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "autoWithdrawThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTaxSwap",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "affilateFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "feePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "burnPercentage",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "coinGenieTreasury",
          "type": "address"
        }
      ],
      "name": "launchToken",
      "outputs": [
        {
          "internalType": "contract CoinGenieERC20",
          "name": "newToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "genie",
          "type": "address"
        }
      ],
      "name": "setGenie",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xecbd6b7707e10bd3b4e2e24d197f86e9f28c4aae5d3bb4aa7c522bf2530270cf",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x837a41023CF81234f89F956C94D676918b4791c1",
    "transactionIndex": 0,
    "gasUsed": "3878476",
    "logsBloom": "0x
    "blockHash": "0x7a289d1f6f23f838504ce1cd2b5ac48d56f3eb20a77a79f09897635702e81da9",
    "transactionHash": "0xecbd6b7707e10bd3b4e2e24d197f86e9f28c4aae5d3bb4aa7c522bf2530270cf",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18180659,
        "transactionHash": "0xecbd6b7707e10bd3b4e2e24d197f86e9f28c4aae5d3bb4aa7c522bf2530270cf",
        "address": "0x837a41023CF81234f89F956C94D676918b4791c1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7a289d1f6f23f838504ce1cd2b5ac48d56f3eb20a77a79f09897635702e81da9"
      }
    ],
    "blockNumber": 18180659,
    "cumulativeGasUsed": "3878476",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bdf9b78fc787f188445a489750fe1f2b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"GenieAlreadySet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBurnable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPausable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDeflationary\",\"type\":\"bool\"}],\"internalType\":\"struct Common.TokenConfigProperties\",\"name\":\"customConfigProps\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoWithdrawThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTaxSwap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"affilateFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"coinGenieTreasury\",\"type\":\"address\"}],\"name\":\"launchToken\",\"outputs\":[{\"internalType\":\"contract CoinGenieERC20\",\"name\":\"newToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"genie\",\"type\":\"address\"}],\"name\":\"setGenie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@neuro_0x\",\"details\":\"A factory library to deploy instances of the CoinGenieERC20 contract.\",\"kind\":\"dev\",\"methods\":{\"launchToken(string,string,uint256,address,(bool,bool,bool),uint256,uint256,uint256,address,address,uint256,uint256,address)\":{\"details\":\"Creates a new instance of the CoinGenieERC20 contract\",\"params\":{\"affilateFeeRecipient\":\"- the address to receive the affiliate fee\",\"autoWithdrawThreshold\":\"- the threshold at which the contract will automatically withdraw the tax fees\",\"burnPercentage\":\"- the percent in basis points to burn on every tx if this token is deflationary\",\"coinGenieTreasury\":\"- the address to receive the royalty fee\",\"customConfigProps\":\"- a struct of configuration booleans for the token\",\"feePercentage\":\"- the percent in basis points to use as a tax\",\"feeRecipient\":\"- the address to receive the tax fees\",\"initialSupply\":\"- the initial supply of the token\",\"maxPerWallet\":\"- the maximum amount of tokens allowed to be held by one wallet\",\"maxTaxSwap\":\"- the maximum amount of tokens allowed to be swapped at once by manual or autoswap\",\"name\":\"- the name of the token\",\"symbol\":\"- the ticker symbol of the token\",\"tokenOwner\":\"- the address that will be the owner of the token\"},\"returns\":{\"newToken\":\"- the CoinGenieERC20 token that was created\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setGenie(address)\":{\"details\":\"Sets the address of the genie token\",\"params\":{\"genie\":\"- the address of the genie token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_genie\":{\"details\":\"The address of the genie token\"}},\"title\":\"ERC20Factory\",\"version\":1},\"userdoc\":{\"errors\":{\"GenieAlreadySet()\":[{\"notice\":\"Error thrown when the genie is already set.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ERC20Factory.sol\":\"ERC20Factory\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363935323535383736353136\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract unpausable.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x180079d8b66f41427ac8ba376d9b60da8161eb327827d3085623798305d4658b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"lib/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"lib/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"lib/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"lib/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"src/CoinGenieERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.20;\\n\\nimport { ERC20 } from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\\\";\\nimport { IERC20 } from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Ownable } from \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport { ERC20Burnable } from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport { ERC20Pausable } from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Pausable.sol\\\";\\nimport { ReentrancyGuard } from \\\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\nimport { SafeMath } from \\\"lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport { IUniswapV2Pair } from \\\"lib/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport { IUniswapV2Router02 } from \\\"lib/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport { IUniswapV2Factory } from \\\"lib/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\nimport { Common } from \\\"./lib/Common.sol\\\";\\nimport { SafeTransfer } from \\\"./lib/SafeTransfer.sol\\\";\\n\\n/**\\n * @title CoinGenieERC20\\n * @author @neuro_0x\\n * @notice A robust and secure ERC20 token for the Coin Genie ecosystem\\n */\\ncontract CoinGenieERC20 is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    /// @dev The max basis points representing 100%\\n    uint256 private constant _MAX_BPS = 10_000;\\n\\n    /// @dev The max tax that can be applied to a transaction. The value is in ether but is handled as 5%.\\n    uint256 private constant _MAX_TAX = 2000; // 20%\\n\\n    /// @dev The minimum amount of eth that must be added to Uniswap when trading is opened.\\n    uint256 private constant _MIN_LIQUIDITY_ETH = 0.5 ether;\\n\\n    /// @dev The minimum amount of erc20 token that must be added to Uniswap when trading is opened.\\n    uint256 private constant _MIN_LIQUIDITY_TOKEN = 1 ether;\\n\\n    /// @dev The amount of $GENIE a person has to hold to get the discount\\n    uint256 public discountFeeRequiredAmount = 50_000 ether;\\n\\n    /// @dev The address of the genie token\\n    address public genieToken;\\n\\n    /// @dev number of decimals of the token\\n    uint8 private immutable _tokenDecimals;\\n\\n    /// @dev initial number of tokens which will be minted during initialization\\n    uint256 public immutable initialSupply;\\n\\n    /// @dev max amount of tokens allowed per wallet\\n    uint256 public maxTokenAmountPerAddress;\\n\\n    /// @dev max amount of tokens the contract can accrue before swapping them for ETH\\n    uint256 public maxTaxSwap;\\n\\n    /// @dev max amount of ETH the contract can accrue before withdrawing them to the fee recipient\\n    uint256 public autoWithdrawThreshold;\\n\\n    /// @dev features of the token\\n    Common.TokenConfigProperties public tokenConfig;\\n\\n    /// @dev the address of the fee recipient\\n    address public feeRecipient;\\n\\n    /// @dev address of the affiliate fee recipient\\n    address public immutable affiliateFeeRecipient;\\n\\n    /// @dev address of the royalty fee recipient (Coin Genie)\\n    address public coinGenieTreasury;\\n\\n    /// @dev the fee percentage in basis points\\n    uint256 public feePercentage;\\n\\n    /// @dev the affiliate fee percentage taken on transfers\\n    uint256 public affiliateFeePercentage = 25; // 0.5%;\\n\\n    /// @dev the affiliate fee percentage in basis points\\n    uint256 public burnPercentage;\\n\\n    /// @dev the royalty fee percentage taken on transfers\\n    uint256 public treasuryFeePercentage = 50; // 0.5%;\\n\\n    /// @dev the percent of eth taken when liquidity is open\\n    uint256 public lpEthFeePercentage = 50; // 0.5%;\\n\\n    /// @dev The address of the Uniswap V2 Router. The contract uses the router for liquidity provision and token swaps\\n    IUniswapV2Router02 public constant UNISWAP_V2_ROUTER =\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    /// @dev The address of the LP token. The contract uses the LP token to determine if a transfer is a buy or sell\\n    address public uniswapV2Pair;\\n\\n    /// @dev The flag for whether swapping is enabled and trading open\\n    bool public isSwapEnabled;\\n\\n    /// @dev Are we currently swapping tokens for ETH?\\n    bool private _inSwap;\\n\\n    /// @dev Modifier to prevent swapping tokens for ETH recursively\\n    modifier lockTheSwap() {\\n        _inSwap = true;\\n        _;\\n        _inSwap = false;\\n    }\\n\\n    /// @notice Error thrown when the genie is already set.\\n    error GenieAlreadySet();\\n\\n    /// @notice Error thrown when the provided maximum token amount is invalid.\\n    error InvalidMaxTokenAmount(uint256 maxPerWallet);\\n\\n    /// @notice Error thrown when the new maximum token amount per address is less than or equal to the previous value.\\n    error MaxTokenAmountPerAddrLtPrevious();\\n\\n    /// @notice Error thrown when the destination balance exceeds the maximum allowed amount.\\n    /// @param addr The address whose balance would exceed the limit.\\n    error DestBalanceExceedsMaxAllowed(address addr);\\n\\n    /// @notice Error thrown when burning is not enabled.\\n    error BurningNotEnabled();\\n\\n    /// @notice Error thrown when pausing is not enabled.\\n    error PausingNotEnabled();\\n\\n    /// @notice Error thrown when the token is not deflationary.\\n    error TokenIsNotDeflationary();\\n\\n    /// @notice Error thrown when an invalid tax basis point is provided.\\n    /// @param bps The invalid basis points for tax.\\n    error InvalidTaxBPS(uint256 bps);\\n\\n    /// @notice Error thrown when an invalid deflation basis point is provided.\\n    /// @param bps The invalid basis points for deflation.\\n    error InvalidDeflationBPS(uint256 bps);\\n\\n    /// @notice Error thrown when trading is already open.\\n    error TradingAlreadyOpen();\\n\\n    /// @notice Error thrown when the provided ETH amount is insufficient.\\n    /// @param amount The provided ETH amount.\\n    /// @param minAmount The minimum required ETH amount.\\n    error InsufficientETH(uint256 amount, uint256 minAmount);\\n\\n    /// @notice Error thrown when the provided token amount is insufficient.\\n    /// @param amount The provided token amount.\\n    /// @param minAmount The minimum required token amount.\\n    error InsufficientTokens(uint256 amount, uint256 minAmount);\\n\\n    /// @notice This event is emitted when the trading is opened.\\n    /// @param pair The address of the LP token.\\n    event TradingOpened(address indexed pair);\\n\\n    /// @notice This event is emitted when the maximum number of tokens allowed per wallet has been updated.\\n    /// @param newMaxTokenAmount The new maximum token amount per wallet.\\n    event MaxTokensPerWalletSet(uint256 indexed newMaxTokenAmount);\\n\\n    /// @notice This event is emitted when the fee configuration of the token has been updated.\\n    /// @param _feeRecipient The updated fee recipient address.\\n    /// @param _feePercentage The updated fee percentage.\\n    event FeeConfigUpdated(address indexed _feeRecipient, uint256 indexed _feePercentage);\\n\\n    /// @notice This event is emitted when the burn configuration of the token has been updated.\\n    /// @param _burnPercentage The updated burn percentage.\\n    event BurnConfigUpdated(uint256 indexed _burnPercentage);\\n\\n    /**\\n     * @dev Initializes the contract with the provided parameters\\n     * @param name_ The name of the token\\n     * @param symbol_ The symbol of the token\\n     * @param initialSupplyToSet The initial supply of the token\\n     * @param tokenOwner The owner of the token\\n     * @param customConfigProps Represents the features of the token\\n     * @param maxPerWallet The max amount of tokens per wallet\\n     * @param maxToSwapForTax The max amount of tokens to swap for tax\\n     * @param _affilateFeeRecipient The address of the affiliate fee recipient\\n     * @param _feeRecipient The address of the fee recipient\\n     * @param _feePercentage The fee percentage in basis points\\n     * @param _burnPercentage The burn percentage in basis points\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 initialSupplyToSet,\\n        address tokenOwner,\\n        Common.TokenConfigProperties memory customConfigProps,\\n        uint256 maxPerWallet,\\n        uint256 maxToSwapForTax,\\n        uint256 _autoWithdrawThreshold,\\n        address _affilateFeeRecipient,\\n        address _feeRecipient,\\n        uint256 _feePercentage,\\n        uint256 _burnPercentage\\n    )\\n        ERC20(name_, symbol_)\\n    {\\n        SafeTransfer.validateAddress(tokenOwner);\\n        initialSupply = initialSupplyToSet;\\n        _tokenDecimals = 18;\\n        affiliateFeeRecipient = _affilateFeeRecipient;\\n\\n        if (_feePercentage > _MAX_TAX) {\\n            revert InvalidTaxBPS(_feePercentage);\\n        }\\n\\n        if (customConfigProps.isDeflationary) {\\n            if (_burnPercentage > _MAX_TAX) {\\n                revert InvalidDeflationBPS(_burnPercentage);\\n            }\\n\\n            burnPercentage = _burnPercentage;\\n        }\\n\\n        tokenConfig = customConfigProps;\\n        maxTokenAmountPerAddress = maxPerWallet;\\n        maxTaxSwap = maxToSwapForTax;\\n        autoWithdrawThreshold = _autoWithdrawThreshold;\\n\\n        SafeTransfer.validateAddress(_feeRecipient);\\n        feeRecipient = _feeRecipient;\\n        feePercentage = _feePercentage;\\n\\n        if (initialSupplyToSet != 0) {\\n            _mint(tokenOwner, initialSupplyToSet);\\n        }\\n    }\\n\\n    /**\\n     * @dev hook called before any transfer of tokens. This includes minting and burning\\n     * imposed by the ERC20 standard\\n     * @param from - address of the sender\\n     * @param to - address of the recipient\\n     * @param amount - amount of tokens to transfer\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n        virtual\\n        override(ERC20, ERC20Pausable)\\n    {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @return true if the token is pausable\\n     */\\n    function isPausable() public view returns (bool) {\\n        return tokenConfig.isPausable;\\n    }\\n\\n    /**\\n     * @return true if the token is burnable\\n     */\\n    function isBurnable() public view returns (bool) {\\n        return tokenConfig.isBurnable;\\n    }\\n\\n    /**\\n     * @return number of decimals for the token\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return _tokenDecimals;\\n    }\\n\\n    /**\\n     * @return true if the token supports deflation\\n     */\\n    function isDeflationary() public view returns (bool) {\\n        return tokenConfig.isDeflationary;\\n    }\\n\\n    /**\\n     * @dev Allows the owner to set the address of the coingenie\\n     * @param coinGenieAddress - the address of the coinGenie\\n     */\\n    function setCoinGenieTreasury(address coinGenieAddress) external {\\n        if (coinGenieTreasury != address(0)) {\\n            revert GenieAlreadySet();\\n        }\\n\\n        coinGenieTreasury = coinGenieAddress;\\n    }\\n\\n    /**\\n     * @dev Allows the owner to set the max amount of tokens the contract can accrue before swapping them for ETH\\n     * @param maxTax - the new max amount of tokens to swap for tax\\n     */\\n    function setMaxTaxSwap(uint256 maxTax) external onlyOwner {\\n        maxTaxSwap = maxTax;\\n    }\\n\\n    /**\\n     * @dev Allows the owner to set the max amount of tokens the contract can accrue before swapping them for ETH\\n     * @param threshold - the new max amount of tokens to swap for tax\\n     */\\n    function setAutoWithdrawThreshold(uint256 threshold) external onlyOwner {\\n        autoWithdrawThreshold = threshold;\\n    }\\n\\n    /**\\n     * @dev Allows the owner to set a max amount of tokens per wallet\\n     * @param newMaxTokenAmount - the new max amount of tokens per wallet\\n     *\\n     * @notice only callable by the owner\\n     * @notice only callable if the token is not paused\\n     * @notice only callable if the token supports max amount of tokens per wallet\\n     */\\n    function setMaxTokenAmountPerAddress(uint256 newMaxTokenAmount) external onlyOwner whenNotPaused {\\n        if (newMaxTokenAmount <= maxTokenAmountPerAddress) {\\n            revert MaxTokenAmountPerAddrLtPrevious();\\n        }\\n\\n        maxTokenAmountPerAddress = newMaxTokenAmount;\\n        emit MaxTokensPerWalletSet(newMaxTokenAmount);\\n    }\\n\\n    /**\\n     * @dev Allows the owner to set the tax config\\n     * @param _feeRecipient - the new feeRecipient\\n     * @param _feePercentage - the new feePercentage\\n     *\\n     * @notice only callable by the owner\\n     * @notice only callable if the token is not paused\\n     * @notice only callable if the feePercentage is not greater than the max tax\\n     */\\n    function setTaxConfig(address _feeRecipient, uint256 _feePercentage) external onlyOwner whenNotPaused {\\n        if (_feePercentage > _MAX_TAX) {\\n            revert InvalidTaxBPS(_feePercentage);\\n        }\\n\\n        SafeTransfer.validateAddress(_feeRecipient);\\n        feeRecipient = _feeRecipient;\\n        feePercentage = _feePercentage;\\n        emit FeeConfigUpdated(_feeRecipient, _feePercentage);\\n    }\\n\\n    /**\\n     * @dev Allows the owner to set the deflation config\\n     * @param _burnPercentage - the new burnPercentage\\n     *\\n     * @notice only callable by the owner\\n     * @notice only callable if the token is not paused\\n     * @notice only callable if the token supports deflation\\n     * @notice only callable if the burnPercentage is not greater than the max allowed bps\\n     */\\n    function setDeflationConfig(uint256 _burnPercentage) external onlyOwner whenNotPaused {\\n        if (!isDeflationary()) {\\n            revert TokenIsNotDeflationary();\\n        }\\n\\n        if (_burnPercentage > _MAX_TAX) {\\n            revert InvalidDeflationBPS(_burnPercentage);\\n        }\\n\\n        burnPercentage = _burnPercentage;\\n        emit BurnConfigUpdated(_burnPercentage);\\n    }\\n\\n    /**\\n     * @dev Allows to transfer a predefined amount of tokens to a predefined address\\n     * @param to - the address to transfer the tokens to\\n     * @param amount - the amount of tokens to transfer\\n     * @return true if the transfer was successful\\n     *\\n     * @notice only callable if the token is not paused\\n     * @notice only callable if the balance of the receiver is lower than the max amount of tokens per wallet\\n     * @notice checks if blacklisting is enabled and if the sender and receiver are not blacklisted\\n     * @notice checks if whitelisting is enabled and if the sender and receiver are whitelisted\\n     * @notice captures the tax during the transfer if tax is enabvled\\n     * @notice burns the deflationary amount during the transfer if deflation is enabled\\n     */\\n    function transfer(address to, uint256 amount) public virtual override whenNotPaused returns (bool) {\\n        address from = msg.sender;\\n        uint256 amountToTransfer = amount;\\n        uint256 royaltyAmount = _calculateRoyaltyAmount(from, amount);\\n        uint256 taxAmount = _calculateTaxAmount(from, amount);\\n        uint256 deflationAmount = _calculateBurnAmount(amount);\\n        bool excludedFromFee = from == address(this) || from == owner() || to == address(this) || to == owner();\\n\\n        if (!excludedFromFee) {\\n            if (balanceOf(to) + amountToTransfer > maxTokenAmountPerAddress) {\\n                revert DestBalanceExceedsMaxAllowed(to);\\n            }\\n\\n            if (isSwapEnabled) {\\n                if (royaltyAmount != 0) {\\n                    _transfer(from, coinGenieTreasury, royaltyAmount);\\n                    amountToTransfer = amountToTransfer - royaltyAmount;\\n                }\\n\\n                if (taxAmount != 0) {\\n                    _transfer(from, feeRecipient, taxAmount);\\n                    amountToTransfer = amountToTransfer - taxAmount;\\n                }\\n\\n                if (deflationAmount != 0) {\\n                    _burn(from, deflationAmount);\\n                    amountToTransfer = amountToTransfer - deflationAmount;\\n                }\\n            }\\n        }\\n\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        if (isSwapEnabled && !_inSwap && to == uniswapV2Pair && contractTokenBalance > maxTaxSwap) {\\n            _swapTokensForEth(_min(amountToTransfer, _min(maxTaxSwap, contractTokenBalance)));\\n\\n            uint256 contractEthBalance = address(this).balance;\\n            if (contractEthBalance > autoWithdrawThreshold) {\\n                payable(feeRecipient).transfer(contractEthBalance);\\n            }\\n        }\\n\\n        return super.transfer(to, amountToTransfer);\\n    }\\n\\n    /**\\n     * @dev Allows to transfer a predefined amount of tokens from a predefined address to a predefined address\\n     * @param from - the address to transfer the tokens from\\n     * @param to - the address to transfer the tokens to\\n     * @param amount - the amount of tokens to transfer\\n     * @return true if the transfer was successful\\n     *\\n     * @notice only callable if the token is not paused\\n     * @notice only callable if the balance of the receiver is lower than the max amount of tokens per wallet\\n     * @notice checks if blacklisting is enabled and if the sender and receiver are not blacklisted\\n     * @notice checks if whitelisting is enabled and if the sender and receiver are whitelisted\\n     * @notice captures the tax during the transfer if tax is enabvled\\n     * @notice burns the deflationary amount during the transfer if deflation is enabled\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        public\\n        virtual\\n        override\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        uint256 amountToTransfer = amount;\\n        uint256 royaltyAmount = _calculateRoyaltyAmount(from, amount);\\n        uint256 taxAmount = _calculateTaxAmount(from, amount);\\n        uint256 deflationAmount = _calculateBurnAmount(amount);\\n        bool excludedFromFee = from == address(this) || from == owner() || to == address(this) || to == owner();\\n\\n        if (!excludedFromFee) {\\n            if (balanceOf(to) + amountToTransfer > maxTokenAmountPerAddress) {\\n                revert DestBalanceExceedsMaxAllowed(to);\\n            }\\n        }\\n\\n        if (!excludedFromFee) {\\n            if (royaltyAmount != 0) {\\n                _transfer(from, coinGenieTreasury, royaltyAmount);\\n                amountToTransfer = amountToTransfer - royaltyAmount;\\n            }\\n\\n            if (taxAmount != 0) {\\n                _transfer(from, feeRecipient, taxAmount);\\n                amountToTransfer = amountToTransfer - taxAmount;\\n            }\\n\\n            if (deflationAmount != 0) {\\n                _burn(from, deflationAmount);\\n                amountToTransfer = amountToTransfer - deflationAmount;\\n            }\\n        }\\n\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        if (isSwapEnabled && !_inSwap && to == uniswapV2Pair && contractTokenBalance > maxTaxSwap) {\\n            _swapTokensForEth(_min(amountToTransfer, _min(maxTaxSwap, contractTokenBalance)));\\n\\n            uint256 contractEthBalance = address(this).balance;\\n            if (contractEthBalance > autoWithdrawThreshold) {\\n                payable(feeRecipient).transfer(contractEthBalance);\\n            }\\n        }\\n\\n        return super.transferFrom(from, to, amountToTransfer);\\n    }\\n\\n    /**\\n     * @dev Allows to burn a predefined amount of tokens\\n     * @param amount - the amount of tokens to burn\\n     *\\n     * @notice only callable by the owner\\n     * @notice only callable if the token is not paused\\n     * @notice only callable if the token supports burning\\n     */\\n    function burn(uint256 amount) public override onlyOwner whenNotPaused {\\n        if (!isBurnable()) {\\n            revert BurningNotEnabled();\\n        }\\n\\n        super.burn(amount);\\n    }\\n\\n    /**\\n     * @dev Allows to burn a predefined amount of tokens from a predefined address\\n     * @param from - the address to burn the tokens from\\n     * @param amount - the amount of tokens to burn\\n     *\\n     * @notice only callable by the owner\\n     * @notice only callable if the token is not paused\\n     * @notice only callable if the token supports burning\\n     * @notice needs Approval\\n     */\\n    function burnFrom(address from, uint256 amount) public override onlyOwner whenNotPaused {\\n        if (!isBurnable()) {\\n            revert BurningNotEnabled();\\n        }\\n\\n        super.burnFrom(from, amount);\\n    }\\n\\n    /**\\n     * @dev Allows to pause the token\\n     *\\n     * @notice only callable by the owner\\n     */\\n    function pause() external onlyOwner {\\n        if (!isPausable()) {\\n            revert PausingNotEnabled();\\n        }\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Allows to unpause the token\\n     *\\n     * @notice only callable by the owner\\n     */\\n    function unpause() external onlyOwner {\\n        if (!isPausable()) {\\n            revert PausingNotEnabled();\\n        }\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Opens trading for the token by adding liquidity to Uniswap.\\n     * @param amountToLP The amount of tokens to add to Uniswap\\n     *\\n     * Emits a {TradingOpened} event.\\n     *\\n     * Preconditions:\\n     *\\n     * Requirements:\\n     *\\n     * `isSwapEnabled` must be false.\\n     * `amountToLP >= _MIN_LIQUIDITY_TOKEN`\\n     * `msg.value >= _MIN_LIQUIDITY_ETH`\\n     */\\n    function openTrading(uint256 amountToLP) external payable onlyOwner nonReentrant returns (IUniswapV2Pair) {\\n        uint256 value = msg.value;\\n        if (isSwapEnabled) {\\n            revert TradingAlreadyOpen();\\n        }\\n\\n        if (amountToLP < _MIN_LIQUIDITY_TOKEN || balanceOf(owner()) < amountToLP) {\\n            revert InsufficientTokens(amountToLP, _MIN_LIQUIDITY_TOKEN);\\n        }\\n\\n        if (value < _MIN_LIQUIDITY_ETH) {\\n            revert InsufficientETH(value, _MIN_LIQUIDITY_ETH);\\n        }\\n\\n        // Transfer the tokens to the contract\\n        transfer(address(this), amountToLP);\\n\\n        // Get the ETH amount to LP and the ETH amount to treasury\\n        uint256 genieBalance = IERC20(genieToken).balanceOf(address(this));\\n        uint256 ethAmountToTreasury = value.mul(lpEthFeePercentage).div(_MAX_BPS);\\n        uint256 ethAmountToLP = value.sub(ethAmountToTreasury);\\n\\n        // If the genie balance is greater than the required amount, the fee is free\\n        if (genieBalance > discountFeeRequiredAmount) {\\n            ethAmountToTreasury = 0;\\n        }\\n\\n        // Approve the router to spend the tokens\\n        _approve(address(this), address(UNISWAP_V2_ROUTER), totalSupply());\\n\\n        // Create the LP token\\n        uniswapV2Pair =\\n            IUniswapV2Factory(UNISWAP_V2_ROUTER.factory()).createPair(address(this), UNISWAP_V2_ROUTER.WETH());\\n\\n        // Approve the router to spend the LP token\\n        IERC20(uniswapV2Pair).approve(address(UNISWAP_V2_ROUTER), type(uint256).max);\\n\\n        // Add liquidity to Uniswap\\n        UNISWAP_V2_ROUTER.addLiquidityETH{ value: ethAmountToLP }(\\n            address(this), balanceOf(address(this)), 0, 0, owner(), block.timestamp\\n        );\\n\\n        // Enable swapping\\n        isSwapEnabled = true;\\n\\n        // Send fee to the treasury\\n        if (ethAmountToTreasury > 0) {\\n            payable(coinGenieTreasury).transfer(ethAmountToTreasury);\\n        }\\n\\n        emit TradingOpened(uniswapV2Pair);\\n\\n        return IUniswapV2Pair(uniswapV2Pair);\\n    }\\n\\n    /**\\n     * @dev Sets the address of the genie token\\n     * @param genie - the address of the genie token\\n     */\\n    function setGenie(address genie) external onlyOwner {\\n        if (genieToken != address(0)) {\\n            revert GenieAlreadySet();\\n        }\\n\\n        genieToken = genie;\\n    }\\n\\n    /**\\n     * @dev Sets the amount of tokens needed to get the discount\\n     * @param amount - the amount of tokens required to hold to get the discount\\n     */\\n    function setDiscountFeeRequiredAmount(uint256 amount) external onlyOwner {\\n        discountFeeRequiredAmount = amount;\\n    }\\n\\n    /**\\n     * @dev Swaps tokens for ETH if the contract balance is greater than the max amount to swap for tax. Then sends\\n     * the ETH to the tax wallet.\\n     */\\n    function manualSwap() external nonReentrant {\\n        uint256 tokenBalance = balanceOf(address(this));\\n        if (tokenBalance > 0) {\\n            _swapTokensForEth(_min(tokenBalance, maxTaxSwap));\\n        }\\n\\n        // Send ETH to the tax wallet\\n        uint256 ethBalance = address(this).balance;\\n        if (ethBalance > autoWithdrawThreshold) {\\n            payable(owner()).transfer(ethBalance);\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the amount of tokens to be taxed during a transfer\\n     * @param sender - the address of the originating account\\n     * @param amount - the total amount of tokens sent in the transfer\\n     * @return taxAmount - the amount of tax to send to the tax walelt\\n     *\\n     * @notice if the tax address is the same as the originating account performing the transfer, no tax is applied\\n     */\\n    function _calculateTaxAmount(address sender, uint256 amount) internal view returns (uint256 taxAmount) {\\n        taxAmount = 0;\\n\\n        if (feeRecipient == address(0)) {\\n            return taxAmount;\\n        }\\n\\n        if (feePercentage != 0 && sender != feeRecipient) {\\n            taxAmount = (amount * feePercentage) / _MAX_BPS;\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the amount of tokens to be taxed during a transfer for the affiliate address\\n     * @param sender - the address of the originating account\\n     * @param amount - the total amount of tokens sent in the transfer\\n     * @return taxAmount - the amount of tax to send to the affilate walelt\\n     *\\n     * @notice if the tax address is the same as the originating account performing the transfer, no tax is applied\\n     */\\n    function _calculateAffiliateAmount(address sender, uint256 amount) internal view returns (uint256 taxAmount) {\\n        taxAmount = 0;\\n\\n        if (affiliateFeeRecipient == address(0)) {\\n            return taxAmount;\\n        }\\n\\n        if (affiliateFeePercentage != 0 && sender != affiliateFeeRecipient) {\\n            taxAmount = (amount * affiliateFeePercentage) / _MAX_BPS;\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the amount of tokens to be taxed during a transfer for the royalty address\\n     * @param sender - the address of the originating account\\n     * @param amount - the total amount of tokens sent in the transfer\\n     * @return taxAmount - the amount of tax to send to the royalty walelt\\n     *\\n     * @notice if the tax address is the same as the originating account performing the transfer, no tax is applied\\n     */\\n    function _calculateRoyaltyAmount(address sender, uint256 amount) internal view returns (uint256 taxAmount) {\\n        taxAmount = 0;\\n\\n        if (coinGenieTreasury == address(0)) {\\n            return taxAmount;\\n        }\\n\\n        if (treasuryFeePercentage != 0 && sender != coinGenieTreasury) {\\n            taxAmount = (amount * treasuryFeePercentage) / _MAX_BPS;\\n        }\\n    }\\n\\n    /**\\n     * @dev method which returns the amount of tokens to be burned during a transfer\\n     * @param amount - the total amount of tokens sent in the transfer\\n     * @return deflationAmount - the amount of tokens to be burned for deflation\\n     */\\n    function _calculateBurnAmount(uint256 amount) internal view returns (uint256 deflationAmount) {\\n        deflationAmount = 0;\\n        if (burnPercentage != 0) {\\n            deflationAmount = (amount * burnPercentage) / _MAX_BPS;\\n        }\\n    }\\n\\n    /**\\n     * @dev Swaps tokens for ETH\\n     * @param tokenAmount The amount of tokens to swap for ETH\\n     */\\n    function _swapTokensForEth(uint256 tokenAmount) private nonReentrant lockTheSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = UNISWAP_V2_ROUTER.WETH();\\n        _approve(address(this), address(UNISWAP_V2_ROUTER), tokenAmount);\\n        UNISWAP_V2_ROUTER.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount, 0, path, address(this), block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     * @param a The first number.\\n     * @param b The second number.\\n     */\\n    function _min(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x834ba7944b4ffc277ae5dc9a4b15a647bbe06f8f390aa146428125075055c58c\",\"license\":\"GPL-3.0\"},\"src/ERC20Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\n\\nimport { CoinGenieERC20 } from \\\"./CoinGenieERC20.sol\\\";\\nimport { Common } from \\\"./lib/Common.sol\\\";\\n\\n/**\\n * @title ERC20Factory\\n * @author @neuro_0x\\n * @dev A factory library to deploy instances of the CoinGenieERC20 contract.\\n */\\ncontract ERC20Factory is Ownable {\\n    /// @dev The address of the genie token\\n    address private _genie;\\n\\n    /// @notice Error thrown when the genie is already set.\\n    error GenieAlreadySet();\\n\\n    /**\\n     * @dev Creates a new instance of the CoinGenieERC20 contract\\n     * @param name - the name of the token\\n     * @param symbol - the ticker symbol of the token\\n     * @param initialSupply - the initial supply of the token\\n     * @param tokenOwner - the address that will be the owner of the token\\n     * @param customConfigProps - a struct of configuration booleans for the token\\n     * @param maxPerWallet - the maximum amount of tokens allowed to be held by one wallet\\n     * @param maxTaxSwap - the maximum amount of tokens allowed to be swapped at once by manual or autoswap\\n     * @param autoWithdrawThreshold - the threshold at which the contract will automatically withdraw the tax fees\\n     * @param affilateFeeRecipient - the address to receive the affiliate fee\\n     * @param feeRecipient - the address to receive the tax fees\\n     * @param feePercentage - the percent in basis points to use as a tax\\n     * @param burnPercentage - the percent in basis points to burn on every tx if this token is deflationary\\n     * @param coinGenieTreasury - the address to receive the royalty fee\\n     *\\n     * @return newToken - the CoinGenieERC20 token that was created\\n     */\\n    function launchToken(\\n        string memory name,\\n        string memory symbol,\\n        uint256 initialSupply,\\n        address tokenOwner,\\n        Common.TokenConfigProperties memory customConfigProps,\\n        uint256 maxPerWallet,\\n        uint256 autoWithdrawThreshold,\\n        uint256 maxTaxSwap,\\n        address affilateFeeRecipient,\\n        address feeRecipient,\\n        uint256 feePercentage,\\n        uint256 burnPercentage,\\n        address coinGenieTreasury\\n    )\\n        external\\n        returns (CoinGenieERC20 newToken)\\n    {\\n        CoinGenieERC20 coinGenieERC20 = new CoinGenieERC20(\\n            name,\\n            symbol,\\n            initialSupply,\\n            tokenOwner,\\n            customConfigProps,\\n            maxPerWallet,\\n            maxTaxSwap,\\n            autoWithdrawThreshold,\\n            affilateFeeRecipient,\\n            feeRecipient,\\n            feePercentage,\\n            burnPercentage\\n        );\\n\\n        coinGenieERC20.setCoinGenieTreasury(coinGenieTreasury);\\n        coinGenieERC20.setGenie(_genie);\\n\\n        if (tokenOwner != address(0) && tokenOwner != coinGenieERC20.owner()) {\\n            coinGenieERC20.transferOwnership(tokenOwner);\\n        }\\n\\n        return coinGenieERC20;\\n    }\\n\\n    /**\\n     * @dev Sets the address of the genie token\\n     * @param genie - the address of the genie token\\n     */\\n    function setGenie(address genie) external onlyOwner {\\n        if (_genie != address(0)) {\\n            revert GenieAlreadySet();\\n        }\\n\\n        _genie = genie;\\n    }\\n}\\n\",\"keccak256\":\"0xa4c19907c903a34df75362d370b2fd9c9838a92368b9a5a79503b2c24bc169f6\",\"license\":\"GPL-3.0\"},\"src/lib/Common.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title Common\\n * @dev Common items used across the CoinGenie contracts.\\n */\\nlibrary Common {\\n    /// @dev set of features supported by the token\\n    struct TokenConfigProperties {\\n        bool isBurnable;\\n        bool isPausable;\\n        bool isDeflationary;\\n    }\\n}\\n\",\"keccak256\":\"0x077884f042fbef72e79889fa4eef48f2884522241491c321f7bcaafcefb68af6\",\"license\":\"GPL-3.0\"},\"src/lib/SafeTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\nlibrary SafeTransfer {\\n    error TransferFailed();\\n\\n    /**\\n     * @dev Sends `amount` (in wei) ETH to `to`.\\n     * @param to The address to send the ETH to.\\n     * @param amount The amount of ETH to send.\\n     */\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gas(), to, amount, 0, 0, 0, 0)) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                // bytes4(keccak256(bytes(\\\"ETHTransferFailed()\\\"))) = 0xb12d13eb\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Validates that the address is not the zero address using assembly.\\n     * @dev Reverts if the address is the zero address.\\n     * @param addr The address to validate.\\n     */\\n    function validateAddress(address addr) internal pure {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            if iszero(shl(96, addr)) {\\n                // Store the function selector of `ZeroAddress()`.\\n                // bytes4(keccak256(bytes(\\\"ZeroAddress()\\\"))) = 0xd92e233d\\n                mstore(0x00, 0xd92e233d)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to transfer ERC20 tokens without the need for SafeERC20.\\n     * @dev Reverts if the ERC20 transfer fails.\\n     * @param tokenAddress The address of the ERC20 token.\\n     * @param from The address to transfer the tokens from.\\n     * @param to The address to transfer the tokens to.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function safeTransferFrom(address tokenAddress, address from, address to, uint256 amount) internal returns (bool) {\\n        (bool success, bytes memory data) =\\n        // solhint-disable-next-line avoid-low-level-calls\\n         tokenAddress.call(abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", from, to, amount));\\n        if (!success) {\\n            if (data.length != 0) {\\n                // bubble up error\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(data)\\n                    revert(add(32, data), returndata_size)\\n                }\\n            } else {\\n                revert TransferFailed();\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Helper function to transfer ERC20 tokens without the need for SafeERC20.\\n    /// @dev Reverts if the ERC20 transfer fails.\\n    /// @param tokenAddress The address of the ERC20 token.\\n    /// @param to The address to transfer the tokens to.\\n    /// @param amount The amount of tokens to transfer.\\n    function safeTransfer(address tokenAddress, address to, uint256 amount) internal returns (bool) {\\n        (bool success, bytes memory data) =\\n        // solhint-disable-next-line avoid-low-level-calls\\n         tokenAddress.call(abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", to, amount));\\n        if (!success) {\\n            if (data.length != 0) {\\n                // bubble up error\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(data)\\n                    revert(add(32, data), returndata_size)\\n                }\\n            } else {\\n                revert TransferFailed();\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xcd0139a88ea2bcaa2dc562192f25f6fe7e18dc526081b42f9c1f8ef47a6aefa9\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052346200002657620000146200002b565b6040516144c86200012682396144c890f35b600080fd5b6200003562000037565b565b6200003533620000c3565b62000054905b6001600160a01b031690565b90565b62000054905462000042565b620000549062000048906001600160a01b031682565b620000549062000063565b620000549062000079565b90620000a362000054620000bf9262000084565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b620000cf600062000057565b90620000dd8160006200008f565b620001146200010d7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09362000084565b9162000084565b916200011f60405190565b600090a356fe608060405260043610156200001357600080fd5b60003560e01c8063715018a6146200006c5780638da5cb5b1462000066578063d5e713531462000060578063dcc79cc8146200005a5763f2fde38b03620000725762000437565b6200041a565b620003c5565b620000be565b62000083565b600080fd5b60009103126200007257565b3462000072576200009636600462000077565b620000a0620004bc565b604051005b0390f35b6001600160a01b031690565b90565b9052565b565b346200007257620000d136600462000077565b620000a5620000df6200046b565b604051918291826001600160a01b03909116815260200190565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176200013257604052565b620000f9565b90620000bc6200014760405190565b92836200010f565b67ffffffffffffffff81116200013257602090601f01601f19160190565b0190565b90826000939282370152565b909291926200019662000190826200014f565b62000138565b938185526020850190828401116200007257620000bc9262000171565b9080601f830112156200007257816020620000b5933591016200017d565b805b036200007257565b90503590620000bc82620001d1565b6001600160a01b038116620001d3565b90503590620000bc82620001ea565b801515620001d3565b90503590620000bc8262000209565b9190916060818403126200007257620002716200023f606062000138565b9360006200024e828562000212565b908601526020620002628282860162000212565b90860152604080930162000212565b90830152565b6101e0818303126200007257803567ffffffffffffffff8111620000725782620002a3918301620001b3565b92602082013567ffffffffffffffff8111620000725783620002c7918401620001b3565b92620002d78160408501620001db565b92620002e78260608301620001fa565b92620002f7836080840162000221565b92620003078160e08501620001db565b9262000318826101008301620001db565b9262000329836101208401620001db565b926200033a816101408501620001fa565b926200034b826101608301620001fa565b92620000b562000360846101808501620001db565b9362000371816101a08601620001db565b936101c001620001fa565b620000b590620000a9906001600160a01b031682565b620000b5906200037c565b620000b59062000392565b620000b8906200039d565b602081019291620000bc9190620003a8565b346200007257620000a5620003f6620003e036600462000277565b9b9a909a999199989298979397969496620007cb565b60405191829182620003b3565b906020828203126200007257620000b591620001fa565b346200007257620000a06200043136600462000403565b62000a98565b346200007257620000a06200044e36600462000403565b620005e9565b620000b590620000a9565b620000b5905462000454565b620000b560006200045f565b620004816200051c565b620000bc620004a6565b620000a9620000b5620000b59290565b620000b5906200048b565b620000bc620004b660006200049b565b62000628565b620000bc62000477565b15620004ce57565b60405162461bcd60e51b81528062000518600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b620000bc6200052a6200046b565b620005466200053933620000a9565b916001600160a01b031690565b14620004c6565b620000bc906200055c6200051c565b620005be565b156200056a57565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b620000bc90620004b6620005d7620000a960006200049b565b6001600160a01b038316141562000562565b620000bc906200054d565b9062000608620000b562000624926200039d565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b6200063460006200045f565b9062000642816000620005f4565b62000679620006727f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936200039d565b916200039d565b916200068460405190565b600090a3565b60005b8381106200069e5750506000910152565b81810151838201526020016200068d565b620006d4620006de6020936200016d93620006c8815190565b80835293849260200190565b958691016200068a565b601f01601f191690565b9997959391909c9b9a989694929c6101c08b018b810360008d01526200070e91620006af565b8a810360208c01526200072191620006af565b9b60408a016200072f919052565b6001600160a01b031660608901528051151560808901526020810151151560a089015260400151151560c088015260e08701526101008601526101208501526001600160a01b03166101408401526001600160a01b03166101608301526101808201526101a00152565b6040513d6000823e3d90fd5b90505190620000bc82620001ea565b906020828203126200007257620000b591620007a5565b97939a96919995929a98949098620007e1600090565b506040519a6139ef8c01908c821067ffffffffffffffff83111762000132578c9b6200081a9b8f938e6139ef9062000aa49039620006e8565b03906000f09182156200097c5762000832836200039d565b90633381e7e2823b15620000725762000860600091620008776200085560405190565b948593849360e01b90565b83526001600160a01b031660048301526024820190565b038183865af180156200097c5762000a2a575b5063dcc79cc86200089c60016200045f565b90823b15620000725762000860600091620008ba6200085560405190565b038183865af180156200097c5762000a10575b50600091620008e0620000a9846200049b565b6001600160a01b03821614158062000982575b620008ff575b50505090565b63f2fde38b90823b1562000072576200093092620008608580946200092360405190565b9687958694859360e01b90565b03925af180156200097c5762000948575b80620008f9565b816200096c92903d1062000974575b6200096381836200010f565b81019062000077565b388062000941565b503d62000957565b62000799565b50638da5cb5b6200099d6200099660405190565b9160e01b90565b8152602081600481865afa80156200097c57620009c9918591620009db575b506001600160a01b031690565b6001600160a01b0382161415620008f3565b62000a01915060203d811162000a08575b620009f881836200010f565b810190620007b4565b38620009bc565b503d620009ec565b62000a239060006200096381836200010f565b38620008cd565b62000a3d9060006200096381836200010f565b386200088a565b620000bc9062000a536200051c565b62000a5f60016200045f565b62000a7362000539620000a960006200049b565b0362000a8657620000bc906001620005f4565b60405163131d002d60e01b8152600490fd5b620000bc9062000a4456fe60e0604052346200005b576200002e62000018620002f7565b9a999099989198979297969396959495620004b1565b604051612e1462000bdb823960805181610595015260a0518161063f015260c05181610a980152612e1490f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200009857604052565b62000060565b90620000b5620000ad60405190565b928362000076565b565b6001600160401b0381116200009857602090601f01601f19160190565b60005b838110620000e85750506000910152565b8181015183820152602001620000d7565b90929192620001126200010c82620000b7565b6200009e565b938185526020850190828401116200005b57620000b592620000d4565b9080601f830112156200005b5781516200014c92602001620000f9565b90565b805b036200005b57565b90505190620000b5826200014f565b6001600160a01b031690565b6001600160a01b03811662000151565b90505190620000b58262000174565b80151562000151565b90505190620000b58262000193565b9190916060818403126200005b57620001fb620001c960606200009e565b936000620001d882856200019c565b908601526020620001ec828286016200019c565b9086015260408093016200019c565b90830152565b90916101c0828403126200005b5781516001600160401b0381116200005b57836200022e9184016200012f565b60208301519093906001600160401b0381116200005b5781620002539185016200012f565b9262000263826040830162000159565b9262000273836060840162000184565b92620002838160808501620001ab565b92620002938260e0830162000159565b92620002a483610100840162000159565b92620002b581610120850162000159565b92620002c682610140830162000184565b926200014c620002db84610160850162000184565b93620002ec81610180860162000159565b936101a00162000159565b6200031a620039ef803803806200030e816200009e565b92833981019062000201565b909192939495969798999a9b565b90600019905b9181191691161790565b6200014c6200014c6200014c9290565b906200035c6200014c620003649262000338565b825462000328565b9055565b620003786200014c6200014c9290565b60ff1690565b6200014c6107d062000338565b9060ff906200032e565b90620003a86200014c6200036492151590565b82546200038b565b9061ff009060081b6200032e565b90620003d16200014c6200036492151590565b8254620003b0565b9062ff00009060101b6200032e565b90620003fb6200014c6200036492151590565b8254620003d9565b620000b5916200044690604090620004266200041f8251151590565b8562000395565b6200043f620004386020830151151590565b85620003be565b0151151590565b90620003e8565b90620000b59162000403565b906001600160a01b03906200032e565b6200014c9062000168906001600160a01b031682565b6200014c9062000469565b6200014c906200047f565b90620004a96200014c62000364926200048a565b825462000459565b90620004c5919b939b9a9998929a62000664565b620004dc690a968163f0a57b400000600762000348565b620004ea6019601062000348565b620005056032620004fd81601262000348565b601362000348565b620005108a62000bc1565b8860a05262000520601262000368565b60805260c052620005306200037e565b8088116200062f576040830151620005c0575b5050926200057b6200059e9695936200057362000583946200056b6200059698600c6200044d565b600962000348565b600a62000348565b600b62000348565b6200058e8162000bc1565b600d62000495565b600f62000348565b620005aa600062000338565b8103620005b5575050565b620000b59162000a37565b811162000602576200059e9695936200057362000583946200056b620005969895620005f26200057b96601162000348565b9598505094505093959662000543565b6200062b906200061160405190565b6305dba32960e51b81529182916004830190815260200190565b0390fd5b6200062b886200063e60405190565b6365a0074b60e11b81529182916004830190815260200190565b6200014c600162000338565b90620006709162000686565b620000b56200067e62000658565b600662000348565b9062000692916200069d565b620000b53362000913565b620000b591620006ad91620006bb565b620000b56000600562000395565b90620000b591620008af565b634e487b7160e01b600052602260045260246000fd5b906001600283049216801562000700575b6020831014620006fa57565b620006c7565b91607f1691620006ee565b9160001960089290920291821b911b6200032e565b9190620007356200014c620003649362000338565b9083546200070b565b620000b59160009162000720565b81811062000758575050565b806200076860006001936200073e565b016200074c565b9190601f81116200077f57505050565b62000793620000b593600052602060002090565b906020601f840181900483019310620007b7575b6020601f9091010401906200074c565b9091508190620007a7565b90620007cc815190565b906001600160401b0382116200009857620007f482620007ed8554620006dd565b856200076f565b602090601f831160011462000833576200036492916000918362000827575b5050600019600883021c1916906002021790565b01519050388062000813565b601f198316916200084985600052602060002090565b9260005b8181106200088a5750916002939185600196941062000870575b50505002019055565b01516000196008601f8516021c1916905538808062000867565b919360206001819287870151815501950192016200084d565b90620000b591620007c2565b90620008c1620000b5926003620008a3565b6004620008a3565b6200014c9060081c62000168565b6200014c9054620008c9565b90610100600160a81b039060081b6200032e565b906200090b6200014c62000364926200048a565b8254620008e3565b6200091f6005620008d7565b906200092d816005620008f7565b620009646200095d7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936200048a565b916200048a565b916200096f60405190565b80805b0390a3565b620001686200014c6200014c9290565b6200014c9062000977565b156200099a57565b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b6200014c9081565b6200014c9054620009df565b634e487b7160e01b600052601160045260246000fd5b9190820180921162000a1757565b620009f3565b9062000a29906200048a565b600052602052604060002090565b600062000abf62000aa48362000a4d8462000987565b9362000a6e6001600160a01b0386166001600160a01b038416141562000992565b62000a7b87838762000b12565b62000a9e62000a968862000a906002620009e7565b62000a09565b600262000348565b62000a1d565b62000ab88562000ab483620009e7565b0190565b9062000348565b6200097262000afa62000af37fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936200048a565b936200048a565b9362000b0560405190565b9182918290815260200190565b90620000b5929162000b7f565b1562000b2757565b60405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686044820152691a5b19481c185d5cd95960b21b6064820152608490fd5b505050620000b562000b9862000b9462000bb5565b1590565b62000b1f565b6200014c9062000378565b6200014c905462000b9e565b6200014c600562000ba9565b60601b1562000bcc57565b63d92e233d6000526004601cfdfe6080604052600436101561001257600080fd5b60003560e01c806302252c4d1461033257806306fdde031461032d578063095ea7b31461032857806312d75f131461032357806318160ddd1461031e57806323b872dd14610319578063313ce567146103145780633381e7e21461030f578063351a964d1461030a578063378dc3dc1461030557806339509351146103005780633f4ba83a146102fb57806342966c68146102f657806346904840146102f157806349bd5a5e146102ec5780634c09f37c146102e757806351bc3c85146102e25780635c975abb146102dd57806362997f8c146102d85780636e2759f3146102d357806370a08231146102ce578063715018a6146102c957806379cc6790146102c45780638456cb59146102bf57806384c5dd01146102ba578063883356d9146102b55780638da5cb5b146102b05780638e8c10a2146102ab57806395d89b41146102a657806399735fd8146102a1578063a001ecdd1461029c578063a09a160114610297578063a457c2d714610292578063a82ed9ec1461028d578063a9059cbb14610288578063b9d0f1af14610283578063ba9341c01461027e578063c68ff0fe14610279578063d163364914610274578063d1ed0a0f1461026f578063d48e41271461026a578063d8f6785114610265578063dcc79cc814610260578063dd62ed3e1461025b578063e08973ce14610256578063ec57459c14610251578063f01f20df1461024c578063f19c4e3b14610247578063f2fde38b146102425763f69cf7830361033757610c35565b610c1d565b610c04565b610be9565b610bc2565b610b9b565b610b73565b610b38565b610b20565b610b05565b610ade565b610abc565b610a83565b610a47565b6109cf565b6109b3565b61098c565b61090c565b6108f1565b6108d6565b6108af565b610888565b61086d565b610852565b610837565b61081c565b6107f8565b6107df565b6107c7565b6107ac565b610794565b610779565b610752565b61073a565b61071f565b6106e2565b6106bb565b610697565b61067f565b610663565b61062a565b61060f565b6105d2565b610580565b610564565b610508565b6104d2565b610479565b610403565b61036b565b600080fd5b805b0361033757565b905035906103528261033c565b565b906020828203126103375761036891610345565b90565b346103375761038361037e366004610354565b6113b5565b604051005b0390f35b600091031261033757565b60005b8381106103aa5750506000910152565b818101518382015260200161039a565b6103db6103e46020936103ee936103cf815190565b80835293849260200190565b95869101610397565b601f01601f191690565b0190565b6020808252610368929101906103ba565b346103375761041336600461038c565b61038861041e610f93565b604051918291826103f2565b6001600160a01b031690565b6001600160a01b03811661033e565b9050359061035282610436565b9190604083820312610337576103689061046c8185610445565b93602001610345565b9052565b346103375761038861049561048f366004610452565b90611016565b60405191829182901515815260200190565b610368916008021c6001600160a01b031690565b9061036891546104a7565b610368600060086104bb565b34610337576104e236600461038c565b6103886104ed6104c6565b6040515b918291826001600160a01b03909116815260200190565b346103375761051836600461038c565b610388610523610fb8565b6040515b9182918290815260200190565b90916060828403126103375761036861054d8484610445565b9361055b8160208601610445565b93604001610345565b346103375761038861049561057a366004610534565b91611e91565b346103375761059036600461038c565b6040517f000000000000000000000000000000000000000000000000000000000000000060ff168152602090f35b906020828203126103375761036891610445565b34610337576103836105e53660046105be565b6112b6565b610368916008021c5b60ff1690565b9061036891546105ea565b6103686014806105f9565b346103375761061f36600461038c565b610388610495610604565b346103375761063a36600461038c565b6103887f0000000000000000000000000000000000000000000000000000000000000000610523565b3461033757610388610495610679366004610452565b9061104e565b346103375761068f36600461038c565b6103836120b0565b34610337576103836106aa366004610354565b611f76565b6103686000600d6104bb565b34610337576106cb36600461038c565b6103886104ed6106af565b610368600060146104bb565b34610337576106f236600461038c565b6103886104ed6106d6565b610368916008021c81565b9061036891546106fd565b61036860006012610708565b346103375761072f36600461038c565b610388610523610713565b346103375761074a36600461038c565b610383612993565b346103375761076236600461038c565b610388610495610e54565b6103686000600a610708565b346103375761078936600461038c565b61038861052361076d565b34610337576103836107a7366004610354565b6128eb565b34610337576103886105236107c23660046105be565b610fda565b34610337576107d736600461038c565b610383610ca5565b34610337576103836107f2366004610452565b90611fc1565b346103375761080836600461038c565b61038361200e565b6103686000600b610708565b346103375761082c36600461038c565b610388610523610810565b346103375761084736600461038c565b610388610495611269565b346103375761086236600461038c565b6103886104ed610c63565b346103375761087d36600461038c565b610388610495611273565b346103375761089836600461038c565b61038861041e610f9d565b6103686000600e6104bb565b34610337576108bf36600461038c565b6103886104ed6108a3565b6103686000600f610708565b34610337576108e636600461038c565b6103886105236108ca565b346103375761090136600461038c565b61038861049561125f565b3461033757610388610495610922366004610452565b906110c7565b6103689061042a906001600160a01b031682565b61036890610928565b6103689061093c565b610368737a250d5630b4cf539739df2c5dacb4c659f2488d610945565b61036861094e565b61047590610945565b6020810192916103529190610973565b346103375761099c36600461038c565b6103886109a761096b565b6040519182918261097c565b34610337576103886104956109c9366004610452565b9061188d565b34610337576103836109e2366004610354565b611309565b610368906105f3565b61036890546109e7565b6103689060081c6105f3565b61036890546109fa565b6103689060101c6105f3565b6103689054610a10565b600c610a31816109f0565b916103686000610a4084610a06565b9301610a1c565b3461033757610a5736600461038c565b610388610a62610a26565b60408051931515845291151560208401521515908201529081906060820190565b3461033757610a9336600461038c565b6103887f00000000000000000000000000000000000000000000000000000000000000006104ed565b6103886109a7610acd366004610354565b6127a1565b61036860006010610708565b3461033757610aee36600461038c565b610388610523610ad2565b61036860006009610708565b3461033757610b1536600461038c565b610388610523610af9565b3461033757610383610b33366004610354565b611579565b3461033757610383610b4b3660046105be565b6128cb565b91906040838203126103375761036890610b6a8185610445565b93602001610445565b3461033757610388610523610b89366004610b50565b90610ff6565b61036860006013610708565b3461033757610bab36600461038c565b610388610523610b8f565b61036860006007610708565b3461033757610bd236600461038c565b610388610523610bb6565b61036860006011610708565b3461033757610bf936600461038c565b610388610523610bdd565b3461033757610383610c17366004610452565b906114c9565b3461033757610383610c303660046105be565b610dbc565b3461033757610383610c48366004610354565b611329565b6103689060081c61042a565b6103689054610c4d565b6103686005610c59565b610c75610d01565b610352610c93565b61042a6103686103689290565b61036890610c7d565b610352610ca06000610c8a565b610df9565b610352610c6d565b15610cb457565b60405162461bcd60e51b815280610cfd600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b610352610d0c610c63565b610d25610d183361042a565b916001600160a01b031690565b14610cad565b61035290610d37610d01565b610d97565b15610d4357565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b61035290610ca0610dab61042a6000610c8a565b6001600160a01b0383161415610d3c565b61035290610d2b565b90610100600160a81b039060081b5b9181191691161790565b90610dee610368610df592610945565b8254610dc5565b9055565b610e036005610c59565b90610e0f816005610dde565b610e42610e3c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610945565b91610945565b91610e4c60405190565b80805b0390a3565b61036860056109f0565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610e94575b6020831014610e8f57565b610e5e565b91607f1691610e84565b80546000939291610ebb610eb183610e74565b8085529360200190565b9160018116908115610f0d5750600114610ed457505050565b610ee79192939450600052602060002090565b916000925b818410610ef95750500190565b805484840152602090930192600101610eec565b92949550505060ff1916825215156020020190565b9061036891610e9e565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff821117610f6457604052565b610f2c565b90610352610f8392610f7a60405190565b93848092610f22565b0383610f42565b61036890610f69565b6103686003610f8a565b6103686004610f8a565b6103689081565b6103689054610fa7565b6103686002610fae565b90610fcc90610945565b600052602052604060002090565b610ff161036891610fe9600090565b506000610fc2565b610fae565b61036891611011610ff192611009600090565b506001610fc2565b610fc2565b6110219190336111c8565b600190565b634e487b7160e01b600052601160045260246000fd5b9190820180921161104957565b611026565b611021919061106733926110628385610ff6565b61103c565b916111c8565b1561107457565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b611021919061106733926110db8385610ff6565b6110e78282101561106d565b0390565b156110f257565b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b1561114a57565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b9060001990610dd4565b6103686103686103689290565b906111c1610368610df5926111a4565b825461119a565b6112076111f66111d86000610c8a565b61042a6001600160a01b0382166001600160a01b03861614156110eb565b6001600160a01b0384161415611143565b61121f8361121a84611011856001610fc2565b6111b1565b610e4f61125561124f7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610945565b93610945565b9361052760405190565b610368600c610a06565b610368600c6109f0565b610368600c610a1c565b6103689061042a565b610368905461127d565b906001600160a01b0390610dd4565b906112af610368610df592610945565b8254611290565b6112c0600e611286565b6112d0610d1861042a6000610c8a565b036112e05761035290600e61129f565b60405163131d002d60e01b8152600490fd5b610352906112fe610d01565b61035290600a6111b1565b610352906112f2565b6103529061131e610d01565b61035290600b6111b1565b61035290611312565b6103529061133e610d01565b6103529061134a6113fd565b6113576103686009610fae565b8111156113a3576113698160096111b1565b6113937faab136b9dbe20468ab36dcd11abd26b3dcea2b259f018136905bf827f37f5514916111a4565b9061139d60405190565b600090a2565b60405163521e96bb60e11b8152600490fd5b61035290611332565b156113c557565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b61035261140f61140b610e54565b1590565b6113be565b9061035291611421610d01565b906103529161142e6113fd565b61143e565b6103686107d06111a4565b9061144a610368611433565b81116114a25761145982612dc6565b61146482600d61129f565b61146f81600f6111b1565b610e4261149c7fe42708d93b95810922305119a3271ca42233da9ebe1e1e503f0e887817a32c7a93610945565b916111a4565b610cfd906114af60405190565b6365a0074b60e11b81529182916004830190815260200190565b9061035291611414565b610352906114df610d01565b610352906114eb6113fd565b6114f661140b611273565b61156757611505610368611433565b8111611540576115168160116111b1565b6113937f8c3208fa4fab043d09d9517339346757a58804a46f954585ba21465677820817916111a4565b610cfd9061154d60405190565b6305dba32960e51b81529182916004830190815260200190565b6040516319b3ca5360e31b8152600490fd5b610352906114d3565b9061036892916115906113fd565b6115da565b6103689060a01c6105f3565b6103689054611595565b9190820391821161104957565b6103689060a81c6105f3565b61036890546115b8565b6040513d6000823e3d90fd5b509033816115e88183612a2f565b916115f3828261299b565b916115fd81612aa3565b9261160730610945565b946001600160a01b0386166001600160a01b038516148015611871575b8015611856575b8015611835575b155b611735575b505050505061164781610fda565b61165160146115a1565b80611722575b80611704575b806116ef575b611673575b505061036891611899565b61169261168c61169792611687600a610fae565b612db4565b84612db4565b612dab565b316116a5610368600b610fae565b81116116b2575b80611668565b6000808080936116cd6116c86116c8600d611286565b610945565b8282156116e6575bf1156116e157386116ac565b6115ce565b506108fc6116d5565b506116fd610368600a610fae565b8111611663565b5061171261042a6014611286565b6001600160a01b0385161461165d565b5061173061140b60146115c4565b611657565b611742836110628a610fda565b6117566117526103686009610fae565b9190565b116118045761176560146115a1565b1561163957600092611776846111a4565b82036117e8575b5050611788826111a4565b81036117c4575b50611799906111a4565b82036117a8575b808080611639565b926117b7826117bc9495611b22565b6115ab565b9038806117a0565b8061179992966117b76117e1936117db600d611286565b876119b6565b949061178f565b6117fc9297506117b7826117db600e611286565b94388061177d565b610cfd8861181160405190565b63f6202a8f60e01b8152918291600483016001600160a01b03909116815260200190565b5061163461184461042a610c63565b6001600160a01b038a16149050611632565b506001600160a01b0386166001600160a01b0389161461162b565b5061187d61042a610c63565b6001600160a01b03851614611624565b61036891906000611582565b6110219190336119b6565b6119b6565b156118b057565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b1561190a57565b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b1561196257565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b611a45611a328360006119fd6119ec6119ce83610c8a565b61042a6001600160a01b0382166001600160a01b038a1614156118a9565b6001600160a01b0384161415611903565b611a08878387611b9a565b611011611a2888611a1c610ff18986610fc2565b6110e78282101561195b565b61121a8784610fc2565b611a3f856103ee83610fae565b906111b1565b610e4f61125561124f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610945565b15611a7c57565b60405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b15611ad257565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b600090611b82611b3183610c8a565b92611b506001600160a01b0385166001600160a01b0385161415611a75565b611b5b858585611b9a565b61121a83611b7c87611b70610ff18487610fc2565b6110e782821015611acb565b92610fc2565b611a45611b93846110e76002610fae565b60026111b1565b906103529291611c04565b15611bac57565b60405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686044820152691a5b19481c185d5cd95960b21b6064820152608490fd5b505050610352611c1561140b610e54565b611ba5565b90610368939291611c296113fd565b50919081611c378185612a2f565b90611c42818661299b565b90611c4c81612aa3565b91611c5630610945565b936001600160a01b0385166001600160a01b038916148015611e75575b8015611e5a575b8015611e39575b155b80611e09575b611d75575b50505050611c9b81610fda565b611ca560146115a1565b80611d62575b80611d44575b80611d2f575b611cc7575b505061036892611e9e565b611692611cdb611ce192611687600a610fae565b85612db4565b31611cef610368600b610fae565b8111611cfc575b80611cbc565b600080808093611d126116c86116c8600d611286565b828215611d26575bf1156116e15738611cf6565b506108fc611d1a565b50611d3d610368600a610fae565b8111611cb7565b50611d5261042a6014611286565b6001600160a01b03841614611cb1565b50611d7061140b60146115c4565b611cab565b600092611d81846111a4565b8203611ded575b5050611d93826111a4565b8103611dc9575b50611da4906111a4565b8103611db3575b808080611c8e565b611dc291936117b78287611b22565b9138611dab565b80611da492966117b7611de693611de0600d611286565b8b6119b6565b9490611d9a565b611e019297506117b782611de0600e611286565b943880611d88565b611e168461106289610fda565b611e266117526103686009610fae565b1115611c8957610cfd8761181160405190565b50611c83611e4861042a610c63565b6001600160a01b038816149050611c81565b506001600160a01b0385166001600160a01b03871614611c7a565b50611e8161042a610c63565b6001600160a01b03891614611c73565b6103689291906000611c1a565b6110219291906118a483335b83611efc565b15611eb757565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b90611f078183610ff6565b6000198103611f17575b50505050565b611f2b93611067916110e782821015611eb0565b38808080611f11565b61035290611f40610d01565b61035290611f4c6113fd565b611f5761140b611269565b611f645761035290611f7f565b604051636cb5913960e01b8152600490fd5b61035290611f34565b6103529033611b22565b611b22565b9061035291611f9b610d01565b9061035291611fa86113fd565b90611fb461140b611269565b611f645761035291611fcb565b9061035291611f8e565b6103529190611f898233611eaa565b611fe2610d01565b610352611ff061140b61125f565b611ffc57610352612086565b60405163f00085b960e01b8152600490fd5b610352611fda565b61201e6113fd565b610352612046565b9060ff90610dd4565b9061203f610368610df592151590565b8254612026565b6120526001600561202f565b336120817f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258916104f160405190565b0390a1565b610352612016565b612096610d01565b6103526120a461140b61125f565b611ffc576103526120fe565b61035261208e565b6120c0612149565b6103526120cf6000600561202f565b336120817f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa916104f160405190565b6103526120b8565b1561210d57565b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b610352612154610e54565b612106565b9061036891612166610d01565b9061217891612173612802565b61230a565b90610352612834565b610368670de0b6b3a76400006111a4565b9081526040810192916103529160200152565b0152565b6103686706f05b59d3b200006111a4565b905051906103528261033c565b9060208282031261033757610368916121ba565b6103686127106111a4565b9050519061035282610436565b9060208282031261033757610368916121e6565b80151561033e565b9050519061035282612207565b90602082820312610337576103689161220f565b6001600160a01b0390911681526040810192916103529160200152565b90916060828403126103375761036861226684846121ba565b9361227481602086016121ba565b936040016121ba565b610475906111a4565b91946122d46121a5929897956122ca60a0966122c06103529a6122b960c08a019e60008b01906001600160a01b03169052565b6020890152565b604087019061227d565b606085019061227d565b6001600160a01b03166080830152565b9060ff60a01b9060a01b610dd4565b90612303610368610df592151590565b82546122e4565b503461231660146115a1565b61278f57612322612181565b808310801561277c575b61275957506123396121a9565b808210612737575061235461234d30610945565b928361188d565b50612382602061236a6116c86116c86008611286565b6370a082319061237960405190565b93849260e01b90565b82526001600160a01b038616600483015260249082905afa9081156116e157600091612709575b506123d86123d16123c36123bd6013610fae565b8561285c565b6123cb6121db565b9061288b565b809361283f565b906123e96117526103686007610fae565b116126f7575b6123fa6116c861094e565b9261240d612406610fb8565b85836111c8565b63c45a015561242561241e60405190565b9160e01b90565b8152602081600481885afa9081156116e15761244d916116c8916000916126d9575b50610945565b9063c9c653969163ad5c46489061246d61246660405190565b9260e01b90565b82526020826004818a5afa9081156116e1576124ca946020936000936126b3575b5060006124ab9161249e60405190565b9788958694859360e01b90565b83526001600160a01b03808a1660048501521660248301526044820190565b03925af19182156116e157612522926124ed91600091612685575b50601461129f565b60206124ff6116c86116c86014611286565b63095ea7b390612516600080199361249e60405190565b83528c60048401612230565b03925af19182156116e157606092612659575b5063f305d7199461257161254883610fda565b9460009761257c612557610c63565b42908b8061256460405190565b9b8c9a8b998a9860e01b90565b885260048801612286565b03925af180156116e15761262b575b50612598600160146122f3565b6125a1826111a4565b81116125f9575b50506125b46014611286565b6125de7f57a9f98b233034883786b9c47f1f6fabcf1655e39d3213b7287b926ca387136e91610945565b906125e860405190565b600090a26103686116c86014611286565b8180809261260d6116c86116c8600e611286565b828215612622575bf1156116e15738806125a8565b506108fc612615565b61264b9060603d8111612652575b6126438183610f42565b81019061224d565b505061258b565b503d612639565b6126799060203d811161267e575b6126718183610f42565b81019061221c565b612535565b503d612667565b6126a6915060203d81116126ac575b61269e8183610f42565b8101906121f3565b386124e5565b503d612694565b6124ab9193506126d1600091863d81116126ac5761269e8183610f42565b93915061248e565b6126f1915060203d81116126ac5761269e8183610f42565b38612447565b905061270360006111a4565b906123ef565b61272a915060203d8111612730575b6127228183610f42565b8101906121c7565b386123a9565b503d612718565b90610cfd61274460405190565b62fdf57560e51b815292839260048401612192565b82610cfd61276660405190565b63c7bcc1b960e01b815292839260048401612192565b506127886107c2610c63565b831161232c565b60405163250856ab60e21b8152600490fd5b610368906000612159565b61036860026111a4565b156127bd57565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b61035261280f6006610fae565b61282361281a6127ac565b918214156127b6565b60066111b1565b61036860016111a4565b61035261282361282a565b61036891906115ab565b8181029291811591840414171561104957565b6103689190612849565b634e487b7160e01b600052601260045260246000fd5b8115612886570490565b612866565b610368919061287c565b610352906128a1610d01565b6128ab6008611286565b6128bb610d1861042a6000610c8a565b036112e05761035290600861129f565b61035290612895565b610352906128e0610d01565b6103529060076111b1565b610352906128d4565b6128fc612802565b61290461290c565b610352612834565b61291530610945565b61291e81610fda565b9060009161292b836111a4565b8111612976575b5031612941610368600b610fae565b811161294b575050565b8180809261295d6116c86116c8610c63565b82821561296d575bf1156116e157565b506108fc612965565b61169261298d91612987600a610fae565b90612db4565b38612932565b6103526128f4565b91906000926129a9846111a4565b80946129c4610d1861042a6129be600d611286565b93610c8a565b14612a29576129d6610368600f610fae565b14159081612a0f575b506129e75750565b610368919250612a01906129fb600f610fae565b90612849565b612a096121db565b9061287c565b9050612a21610d1861042a600d611286565b1415386129df565b93505050565b9190600092612a3d846111a4565b8094612a52610d1861042a6129be600e611286565b14612a2957612a646103686012610fae565b14159081612a89575b50612a755750565b610368919250612a01906129fb6012610fae565b9050612a9b610d1861042a600e611286565b141538612a6d565b90612aae60006111a4565b9182612abd6103686011610fae565b03612ac55750565b610368919250612a01906129fb6011610fae565b61290490612ae5612802565b612b10565b9060ff60a81b9060a81b610dd4565b90612b09610368610df592151590565b8254612aea565b612b2590612b2060016014612af9565b612c7d565b61035260006014612af9565b90610352612b3e60405190565b9283610f42565b67ffffffffffffffff8111610f645760208091020190565b90612b6f612b6a83612b45565b612b31565b918252565b369037565b90610352612b8f612b8984612b5d565b93612b45565b601f190160208401612b74565b634e487b7160e01b600052603260045260246000fd5b90612bbb825190565b811015612bcc576020809102010190565b612b9c565b90612bf1612bea612be0845190565b8084529260200190565b9260200190565b9060005b818110612c025750505090565b909192612c28612c2160019286516001600160a01b0316815260200190565b9460200190565b929101612bf5565b90612c6b6121a59161035296989795612c5e608096612c5460a08801946000890152565b602087019061227d565b8482036040860152612bd1565b6001600160a01b039097166060830152565b612c8f612c8a60026111a4565b612b79565b612c9830610945565b90600092612cc083612cb2612cac876111a4565b85612bb2565b906001600160a01b03169052565b612ccb6116c861094e565b63ad5c4648612cdc61241e60405190565b8152602081600481855afa80156116e157612d0c918791612d8d575b50612cb2612d0660016111a4565b86612bb2565b612d178282866111c8565b63791ac947934290823b15610337578695612d55612d4a938897938894612d3d60405190565b9a8b998a98899760e01b90565b875260048701612c30565b03925af180156116e157612d67575050565b8161035292903d10612d86575b612d7e8183610f42565b81019061038c565b503d612d74565b612da5915060203d81116126ac5761269e8183610f42565b38612cf8565b61035290612ad9565b9080821015612dc1575090565b905090565b60601b15612dd057565b63d92e233d6000526004601cfdfea26469706673582212203772d99424b0f5238201a53e7c3f08897a2c02c13ca35a3a279108729d5b10d664736f6c63430008140033a2646970667358221220c4dbcea16149ca69debfe4463dbcb6ec73933096c015a07bb3ff8f80e2aedb8564736f6c63430008140033",
  "deployedBytecode": "0x608060405260043610156200001357600080fd5b60003560e01c8063715018a6146200006c5780638da5cb5b1462000066578063d5e713531462000060578063dcc79cc8146200005a5763f2fde38b03620000725762000437565b6200041a565b620003c5565b620000be565b62000083565b600080fd5b60009103126200007257565b3462000072576200009636600462000077565b620000a0620004bc565b604051005b0390f35b6001600160a01b031690565b90565b9052565b565b346200007257620000d136600462000077565b620000a5620000df6200046b565b604051918291826001600160a01b03909116815260200190565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176200013257604052565b620000f9565b90620000bc6200014760405190565b92836200010f565b67ffffffffffffffff81116200013257602090601f01601f19160190565b0190565b90826000939282370152565b909291926200019662000190826200014f565b62000138565b938185526020850190828401116200007257620000bc9262000171565b9080601f830112156200007257816020620000b5933591016200017d565b805b036200007257565b90503590620000bc82620001d1565b6001600160a01b038116620001d3565b90503590620000bc82620001ea565b801515620001d3565b90503590620000bc8262000209565b9190916060818403126200007257620002716200023f606062000138565b9360006200024e828562000212565b908601526020620002628282860162000212565b90860152604080930162000212565b90830152565b6101e0818303126200007257803567ffffffffffffffff8111620000725782620002a3918301620001b3565b92602082013567ffffffffffffffff8111620000725783620002c7918401620001b3565b92620002d78160408501620001db565b92620002e78260608301620001fa565b92620002f7836080840162000221565b92620003078160e08501620001db565b9262000318826101008301620001db565b9262000329836101208401620001db565b926200033a816101408501620001fa565b926200034b826101608301620001fa565b92620000b562000360846101808501620001db565b9362000371816101a08601620001db565b936101c001620001fa565b620000b590620000a9906001600160a01b031682565b620000b5906200037c565b620000b59062000392565b620000b8906200039d565b602081019291620000bc9190620003a8565b346200007257620000a5620003f6620003e036600462000277565b9b9a909a999199989298979397969496620007cb565b60405191829182620003b3565b906020828203126200007257620000b591620001fa565b346200007257620000a06200043136600462000403565b62000a98565b346200007257620000a06200044e36600462000403565b620005e9565b620000b590620000a9565b620000b5905462000454565b620000b560006200045f565b620004816200051c565b620000bc620004a6565b620000a9620000b5620000b59290565b620000b5906200048b565b620000bc620004b660006200049b565b62000628565b620000bc62000477565b15620004ce57565b60405162461bcd60e51b81528062000518600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b620000bc6200052a6200046b565b620005466200053933620000a9565b916001600160a01b031690565b14620004c6565b620000bc906200055c6200051c565b620005be565b156200056a57565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b620000bc90620004b6620005d7620000a960006200049b565b6001600160a01b038316141562000562565b620000bc906200054d565b9062000608620000b562000624926200039d565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b6200063460006200045f565b9062000642816000620005f4565b62000679620006727f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936200039d565b916200039d565b916200068460405190565b600090a3565b60005b8381106200069e5750506000910152565b81810151838201526020016200068d565b620006d4620006de6020936200016d93620006c8815190565b80835293849260200190565b958691016200068a565b601f01601f191690565b9997959391909c9b9a989694929c6101c08b018b810360008d01526200070e91620006af565b8a810360208c01526200072191620006af565b9b60408a016200072f919052565b6001600160a01b031660608901528051151560808901526020810151151560a089015260400151151560c088015260e08701526101008601526101208501526001600160a01b03166101408401526001600160a01b03166101608301526101808201526101a00152565b6040513d6000823e3d90fd5b90505190620000bc82620001ea565b906020828203126200007257620000b591620007a5565b97939a96919995929a98949098620007e1600090565b506040519a6139ef8c01908c821067ffffffffffffffff83111762000132578c9b6200081a9b8f938e6139ef9062000aa49039620006e8565b03906000f09182156200097c5762000832836200039d565b90633381e7e2823b15620000725762000860600091620008776200085560405190565b948593849360e01b90565b83526001600160a01b031660048301526024820190565b038183865af180156200097c5762000a2a575b5063dcc79cc86200089c60016200045f565b90823b15620000725762000860600091620008ba6200085560405190565b038183865af180156200097c5762000a10575b50600091620008e0620000a9846200049b565b6001600160a01b03821614158062000982575b620008ff575b50505090565b63f2fde38b90823b1562000072576200093092620008608580946200092360405190565b9687958694859360e01b90565b03925af180156200097c5762000948575b80620008f9565b816200096c92903d1062000974575b6200096381836200010f565b81019062000077565b388062000941565b503d62000957565b62000799565b50638da5cb5b6200099d6200099660405190565b9160e01b90565b8152602081600481865afa80156200097c57620009c9918591620009db575b506001600160a01b031690565b6001600160a01b0382161415620008f3565b62000a01915060203d811162000a08575b620009f881836200010f565b810190620007b4565b38620009bc565b503d620009ec565b62000a239060006200096381836200010f565b38620008cd565b62000a3d9060006200096381836200010f565b386200088a565b620000bc9062000a536200051c565b62000a5f60016200045f565b62000a7362000539620000a960006200049b565b0362000a8657620000bc906001620005f4565b60405163131d002d60e01b8152600490fd5b620000bc9062000a4456fe60e0604052346200005b576200002e62000018620002f7565b9a999099989198979297969396959495620004b1565b604051612e1462000bdb823960805181610595015260a0518161063f015260c05181610a980152612e1490f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200009857604052565b62000060565b90620000b5620000ad60405190565b928362000076565b565b6001600160401b0381116200009857602090601f01601f19160190565b60005b838110620000e85750506000910152565b8181015183820152602001620000d7565b90929192620001126200010c82620000b7565b6200009e565b938185526020850190828401116200005b57620000b592620000d4565b9080601f830112156200005b5781516200014c92602001620000f9565b90565b805b036200005b57565b90505190620000b5826200014f565b6001600160a01b031690565b6001600160a01b03811662000151565b90505190620000b58262000174565b80151562000151565b90505190620000b58262000193565b9190916060818403126200005b57620001fb620001c960606200009e565b936000620001d882856200019c565b908601526020620001ec828286016200019c565b9086015260408093016200019c565b90830152565b90916101c0828403126200005b5781516001600160401b0381116200005b57836200022e9184016200012f565b60208301519093906001600160401b0381116200005b5781620002539185016200012f565b9262000263826040830162000159565b9262000273836060840162000184565b92620002838160808501620001ab565b92620002938260e0830162000159565b92620002a483610100840162000159565b92620002b581610120850162000159565b92620002c682610140830162000184565b926200014c620002db84610160850162000184565b93620002ec81610180860162000159565b936101a00162000159565b6200031a620039ef803803806200030e816200009e565b92833981019062000201565b909192939495969798999a9b565b90600019905b9181191691161790565b6200014c6200014c6200014c9290565b906200035c6200014c620003649262000338565b825462000328565b9055565b620003786200014c6200014c9290565b60ff1690565b6200014c6107d062000338565b9060ff906200032e565b90620003a86200014c6200036492151590565b82546200038b565b9061ff009060081b6200032e565b90620003d16200014c6200036492151590565b8254620003b0565b9062ff00009060101b6200032e565b90620003fb6200014c6200036492151590565b8254620003d9565b620000b5916200044690604090620004266200041f8251151590565b8562000395565b6200043f620004386020830151151590565b85620003be565b0151151590565b90620003e8565b90620000b59162000403565b906001600160a01b03906200032e565b6200014c9062000168906001600160a01b031682565b6200014c9062000469565b6200014c906200047f565b90620004a96200014c62000364926200048a565b825462000459565b90620004c5919b939b9a9998929a62000664565b620004dc690a968163f0a57b400000600762000348565b620004ea6019601062000348565b620005056032620004fd81601262000348565b601362000348565b620005108a62000bc1565b8860a05262000520601262000368565b60805260c052620005306200037e565b8088116200062f576040830151620005c0575b5050926200057b6200059e9695936200057362000583946200056b6200059698600c6200044d565b600962000348565b600a62000348565b600b62000348565b6200058e8162000bc1565b600d62000495565b600f62000348565b620005aa600062000338565b8103620005b5575050565b620000b59162000a37565b811162000602576200059e9695936200057362000583946200056b620005969895620005f26200057b96601162000348565b9598505094505093959662000543565b6200062b906200061160405190565b6305dba32960e51b81529182916004830190815260200190565b0390fd5b6200062b886200063e60405190565b6365a0074b60e11b81529182916004830190815260200190565b6200014c600162000338565b90620006709162000686565b620000b56200067e62000658565b600662000348565b9062000692916200069d565b620000b53362000913565b620000b591620006ad91620006bb565b620000b56000600562000395565b90620000b591620008af565b634e487b7160e01b600052602260045260246000fd5b906001600283049216801562000700575b6020831014620006fa57565b620006c7565b91607f1691620006ee565b9160001960089290920291821b911b6200032e565b9190620007356200014c620003649362000338565b9083546200070b565b620000b59160009162000720565b81811062000758575050565b806200076860006001936200073e565b016200074c565b9190601f81116200077f57505050565b62000793620000b593600052602060002090565b906020601f840181900483019310620007b7575b6020601f9091010401906200074c565b9091508190620007a7565b90620007cc815190565b906001600160401b0382116200009857620007f482620007ed8554620006dd565b856200076f565b602090601f831160011462000833576200036492916000918362000827575b5050600019600883021c1916906002021790565b01519050388062000813565b601f198316916200084985600052602060002090565b9260005b8181106200088a5750916002939185600196941062000870575b50505002019055565b01516000196008601f8516021c1916905538808062000867565b919360206001819287870151815501950192016200084d565b90620000b591620007c2565b90620008c1620000b5926003620008a3565b6004620008a3565b6200014c9060081c62000168565b6200014c9054620008c9565b90610100600160a81b039060081b6200032e565b906200090b6200014c62000364926200048a565b8254620008e3565b6200091f6005620008d7565b906200092d816005620008f7565b620009646200095d7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936200048a565b916200048a565b916200096f60405190565b80805b0390a3565b620001686200014c6200014c9290565b6200014c9062000977565b156200099a57565b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b6200014c9081565b6200014c9054620009df565b634e487b7160e01b600052601160045260246000fd5b9190820180921162000a1757565b620009f3565b9062000a29906200048a565b600052602052604060002090565b600062000abf62000aa48362000a4d8462000987565b9362000a6e6001600160a01b0386166001600160a01b038416141562000992565b62000a7b87838762000b12565b62000a9e62000a968862000a906002620009e7565b62000a09565b600262000348565b62000a1d565b62000ab88562000ab483620009e7565b0190565b9062000348565b6200097262000afa62000af37fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936200048a565b936200048a565b9362000b0560405190565b9182918290815260200190565b90620000b5929162000b7f565b1562000b2757565b60405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686044820152691a5b19481c185d5cd95960b21b6064820152608490fd5b505050620000b562000b9862000b9462000bb5565b1590565b62000b1f565b6200014c9062000378565b6200014c905462000b9e565b6200014c600562000ba9565b60601b1562000bcc57565b63d92e233d6000526004601cfdfe6080604052600436101561001257600080fd5b60003560e01c806302252c4d1461033257806306fdde031461032d578063095ea7b31461032857806312d75f131461032357806318160ddd1461031e57806323b872dd14610319578063313ce567146103145780633381e7e21461030f578063351a964d1461030a578063378dc3dc1461030557806339509351146103005780633f4ba83a146102fb57806342966c68146102f657806346904840146102f157806349bd5a5e146102ec5780634c09f37c146102e757806351bc3c85146102e25780635c975abb146102dd57806362997f8c146102d85780636e2759f3146102d357806370a08231146102ce578063715018a6146102c957806379cc6790146102c45780638456cb59146102bf57806384c5dd01146102ba578063883356d9146102b55780638da5cb5b146102b05780638e8c10a2146102ab57806395d89b41146102a657806399735fd8146102a1578063a001ecdd1461029c578063a09a160114610297578063a457c2d714610292578063a82ed9ec1461028d578063a9059cbb14610288578063b9d0f1af14610283578063ba9341c01461027e578063c68ff0fe14610279578063d163364914610274578063d1ed0a0f1461026f578063d48e41271461026a578063d8f6785114610265578063dcc79cc814610260578063dd62ed3e1461025b578063e08973ce14610256578063ec57459c14610251578063f01f20df1461024c578063f19c4e3b14610247578063f2fde38b146102425763f69cf7830361033757610c35565b610c1d565b610c04565b610be9565b610bc2565b610b9b565b610b73565b610b38565b610b20565b610b05565b610ade565b610abc565b610a83565b610a47565b6109cf565b6109b3565b61098c565b61090c565b6108f1565b6108d6565b6108af565b610888565b61086d565b610852565b610837565b61081c565b6107f8565b6107df565b6107c7565b6107ac565b610794565b610779565b610752565b61073a565b61071f565b6106e2565b6106bb565b610697565b61067f565b610663565b61062a565b61060f565b6105d2565b610580565b610564565b610508565b6104d2565b610479565b610403565b61036b565b600080fd5b805b0361033757565b905035906103528261033c565b565b906020828203126103375761036891610345565b90565b346103375761038361037e366004610354565b6113b5565b604051005b0390f35b600091031261033757565b60005b8381106103aa5750506000910152565b818101518382015260200161039a565b6103db6103e46020936103ee936103cf815190565b80835293849260200190565b95869101610397565b601f01601f191690565b0190565b6020808252610368929101906103ba565b346103375761041336600461038c565b61038861041e610f93565b604051918291826103f2565b6001600160a01b031690565b6001600160a01b03811661033e565b9050359061035282610436565b9190604083820312610337576103689061046c8185610445565b93602001610345565b9052565b346103375761038861049561048f366004610452565b90611016565b60405191829182901515815260200190565b610368916008021c6001600160a01b031690565b9061036891546104a7565b610368600060086104bb565b34610337576104e236600461038c565b6103886104ed6104c6565b6040515b918291826001600160a01b03909116815260200190565b346103375761051836600461038c565b610388610523610fb8565b6040515b9182918290815260200190565b90916060828403126103375761036861054d8484610445565b9361055b8160208601610445565b93604001610345565b346103375761038861049561057a366004610534565b91611e91565b346103375761059036600461038c565b6040517f000000000000000000000000000000000000000000000000000000000000000060ff168152602090f35b906020828203126103375761036891610445565b34610337576103836105e53660046105be565b6112b6565b610368916008021c5b60ff1690565b9061036891546105ea565b6103686014806105f9565b346103375761061f36600461038c565b610388610495610604565b346103375761063a36600461038c565b6103887f0000000000000000000000000000000000000000000000000000000000000000610523565b3461033757610388610495610679366004610452565b9061104e565b346103375761068f36600461038c565b6103836120b0565b34610337576103836106aa366004610354565b611f76565b6103686000600d6104bb565b34610337576106cb36600461038c565b6103886104ed6106af565b610368600060146104bb565b34610337576106f236600461038c565b6103886104ed6106d6565b610368916008021c81565b9061036891546106fd565b61036860006012610708565b346103375761072f36600461038c565b610388610523610713565b346103375761074a36600461038c565b610383612993565b346103375761076236600461038c565b610388610495610e54565b6103686000600a610708565b346103375761078936600461038c565b61038861052361076d565b34610337576103836107a7366004610354565b6128eb565b34610337576103886105236107c23660046105be565b610fda565b34610337576107d736600461038c565b610383610ca5565b34610337576103836107f2366004610452565b90611fc1565b346103375761080836600461038c565b61038361200e565b6103686000600b610708565b346103375761082c36600461038c565b610388610523610810565b346103375761084736600461038c565b610388610495611269565b346103375761086236600461038c565b6103886104ed610c63565b346103375761087d36600461038c565b610388610495611273565b346103375761089836600461038c565b61038861041e610f9d565b6103686000600e6104bb565b34610337576108bf36600461038c565b6103886104ed6108a3565b6103686000600f610708565b34610337576108e636600461038c565b6103886105236108ca565b346103375761090136600461038c565b61038861049561125f565b3461033757610388610495610922366004610452565b906110c7565b6103689061042a906001600160a01b031682565b61036890610928565b6103689061093c565b610368737a250d5630b4cf539739df2c5dacb4c659f2488d610945565b61036861094e565b61047590610945565b6020810192916103529190610973565b346103375761099c36600461038c565b6103886109a761096b565b6040519182918261097c565b34610337576103886104956109c9366004610452565b9061188d565b34610337576103836109e2366004610354565b611309565b610368906105f3565b61036890546109e7565b6103689060081c6105f3565b61036890546109fa565b6103689060101c6105f3565b6103689054610a10565b600c610a31816109f0565b916103686000610a4084610a06565b9301610a1c565b3461033757610a5736600461038c565b610388610a62610a26565b60408051931515845291151560208401521515908201529081906060820190565b3461033757610a9336600461038c565b6103887f00000000000000000000000000000000000000000000000000000000000000006104ed565b6103886109a7610acd366004610354565b6127a1565b61036860006010610708565b3461033757610aee36600461038c565b610388610523610ad2565b61036860006009610708565b3461033757610b1536600461038c565b610388610523610af9565b3461033757610383610b33366004610354565b611579565b3461033757610383610b4b3660046105be565b6128cb565b91906040838203126103375761036890610b6a8185610445565b93602001610445565b3461033757610388610523610b89366004610b50565b90610ff6565b61036860006013610708565b3461033757610bab36600461038c565b610388610523610b8f565b61036860006007610708565b3461033757610bd236600461038c565b610388610523610bb6565b61036860006011610708565b3461033757610bf936600461038c565b610388610523610bdd565b3461033757610383610c17366004610452565b906114c9565b3461033757610383610c303660046105be565b610dbc565b3461033757610383610c48366004610354565b611329565b6103689060081c61042a565b6103689054610c4d565b6103686005610c59565b610c75610d01565b610352610c93565b61042a6103686103689290565b61036890610c7d565b610352610ca06000610c8a565b610df9565b610352610c6d565b15610cb457565b60405162461bcd60e51b815280610cfd600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b610352610d0c610c63565b610d25610d183361042a565b916001600160a01b031690565b14610cad565b61035290610d37610d01565b610d97565b15610d4357565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b61035290610ca0610dab61042a6000610c8a565b6001600160a01b0383161415610d3c565b61035290610d2b565b90610100600160a81b039060081b5b9181191691161790565b90610dee610368610df592610945565b8254610dc5565b9055565b610e036005610c59565b90610e0f816005610dde565b610e42610e3c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610945565b91610945565b91610e4c60405190565b80805b0390a3565b61036860056109f0565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610e94575b6020831014610e8f57565b610e5e565b91607f1691610e84565b80546000939291610ebb610eb183610e74565b8085529360200190565b9160018116908115610f0d5750600114610ed457505050565b610ee79192939450600052602060002090565b916000925b818410610ef95750500190565b805484840152602090930192600101610eec565b92949550505060ff1916825215156020020190565b9061036891610e9e565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff821117610f6457604052565b610f2c565b90610352610f8392610f7a60405190565b93848092610f22565b0383610f42565b61036890610f69565b6103686003610f8a565b6103686004610f8a565b6103689081565b6103689054610fa7565b6103686002610fae565b90610fcc90610945565b600052602052604060002090565b610ff161036891610fe9600090565b506000610fc2565b610fae565b61036891611011610ff192611009600090565b506001610fc2565b610fc2565b6110219190336111c8565b600190565b634e487b7160e01b600052601160045260246000fd5b9190820180921161104957565b611026565b611021919061106733926110628385610ff6565b61103c565b916111c8565b1561107457565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b611021919061106733926110db8385610ff6565b6110e78282101561106d565b0390565b156110f257565b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b1561114a57565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b9060001990610dd4565b6103686103686103689290565b906111c1610368610df5926111a4565b825461119a565b6112076111f66111d86000610c8a565b61042a6001600160a01b0382166001600160a01b03861614156110eb565b6001600160a01b0384161415611143565b61121f8361121a84611011856001610fc2565b6111b1565b610e4f61125561124f7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610945565b93610945565b9361052760405190565b610368600c610a06565b610368600c6109f0565b610368600c610a1c565b6103689061042a565b610368905461127d565b906001600160a01b0390610dd4565b906112af610368610df592610945565b8254611290565b6112c0600e611286565b6112d0610d1861042a6000610c8a565b036112e05761035290600e61129f565b60405163131d002d60e01b8152600490fd5b610352906112fe610d01565b61035290600a6111b1565b610352906112f2565b6103529061131e610d01565b61035290600b6111b1565b61035290611312565b6103529061133e610d01565b6103529061134a6113fd565b6113576103686009610fae565b8111156113a3576113698160096111b1565b6113937faab136b9dbe20468ab36dcd11abd26b3dcea2b259f018136905bf827f37f5514916111a4565b9061139d60405190565b600090a2565b60405163521e96bb60e11b8152600490fd5b61035290611332565b156113c557565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b61035261140f61140b610e54565b1590565b6113be565b9061035291611421610d01565b906103529161142e6113fd565b61143e565b6103686107d06111a4565b9061144a610368611433565b81116114a25761145982612dc6565b61146482600d61129f565b61146f81600f6111b1565b610e4261149c7fe42708d93b95810922305119a3271ca42233da9ebe1e1e503f0e887817a32c7a93610945565b916111a4565b610cfd906114af60405190565b6365a0074b60e11b81529182916004830190815260200190565b9061035291611414565b610352906114df610d01565b610352906114eb6113fd565b6114f661140b611273565b61156757611505610368611433565b8111611540576115168160116111b1565b6113937f8c3208fa4fab043d09d9517339346757a58804a46f954585ba21465677820817916111a4565b610cfd9061154d60405190565b6305dba32960e51b81529182916004830190815260200190565b6040516319b3ca5360e31b8152600490fd5b610352906114d3565b9061036892916115906113fd565b6115da565b6103689060a01c6105f3565b6103689054611595565b9190820391821161104957565b6103689060a81c6105f3565b61036890546115b8565b6040513d6000823e3d90fd5b509033816115e88183612a2f565b916115f3828261299b565b916115fd81612aa3565b9261160730610945565b946001600160a01b0386166001600160a01b038516148015611871575b8015611856575b8015611835575b155b611735575b505050505061164781610fda565b61165160146115a1565b80611722575b80611704575b806116ef575b611673575b505061036891611899565b61169261168c61169792611687600a610fae565b612db4565b84612db4565b612dab565b316116a5610368600b610fae565b81116116b2575b80611668565b6000808080936116cd6116c86116c8600d611286565b610945565b8282156116e6575bf1156116e157386116ac565b6115ce565b506108fc6116d5565b506116fd610368600a610fae565b8111611663565b5061171261042a6014611286565b6001600160a01b0385161461165d565b5061173061140b60146115c4565b611657565b611742836110628a610fda565b6117566117526103686009610fae565b9190565b116118045761176560146115a1565b1561163957600092611776846111a4565b82036117e8575b5050611788826111a4565b81036117c4575b50611799906111a4565b82036117a8575b808080611639565b926117b7826117bc9495611b22565b6115ab565b9038806117a0565b8061179992966117b76117e1936117db600d611286565b876119b6565b949061178f565b6117fc9297506117b7826117db600e611286565b94388061177d565b610cfd8861181160405190565b63f6202a8f60e01b8152918291600483016001600160a01b03909116815260200190565b5061163461184461042a610c63565b6001600160a01b038a16149050611632565b506001600160a01b0386166001600160a01b0389161461162b565b5061187d61042a610c63565b6001600160a01b03851614611624565b61036891906000611582565b6110219190336119b6565b6119b6565b156118b057565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b1561190a57565b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b1561196257565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b611a45611a328360006119fd6119ec6119ce83610c8a565b61042a6001600160a01b0382166001600160a01b038a1614156118a9565b6001600160a01b0384161415611903565b611a08878387611b9a565b611011611a2888611a1c610ff18986610fc2565b6110e78282101561195b565b61121a8784610fc2565b611a3f856103ee83610fae565b906111b1565b610e4f61125561124f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610945565b15611a7c57565b60405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b15611ad257565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b600090611b82611b3183610c8a565b92611b506001600160a01b0385166001600160a01b0385161415611a75565b611b5b858585611b9a565b61121a83611b7c87611b70610ff18487610fc2565b6110e782821015611acb565b92610fc2565b611a45611b93846110e76002610fae565b60026111b1565b906103529291611c04565b15611bac57565b60405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686044820152691a5b19481c185d5cd95960b21b6064820152608490fd5b505050610352611c1561140b610e54565b611ba5565b90610368939291611c296113fd565b50919081611c378185612a2f565b90611c42818661299b565b90611c4c81612aa3565b91611c5630610945565b936001600160a01b0385166001600160a01b038916148015611e75575b8015611e5a575b8015611e39575b155b80611e09575b611d75575b50505050611c9b81610fda565b611ca560146115a1565b80611d62575b80611d44575b80611d2f575b611cc7575b505061036892611e9e565b611692611cdb611ce192611687600a610fae565b85612db4565b31611cef610368600b610fae565b8111611cfc575b80611cbc565b600080808093611d126116c86116c8600d611286565b828215611d26575bf1156116e15738611cf6565b506108fc611d1a565b50611d3d610368600a610fae565b8111611cb7565b50611d5261042a6014611286565b6001600160a01b03841614611cb1565b50611d7061140b60146115c4565b611cab565b600092611d81846111a4565b8203611ded575b5050611d93826111a4565b8103611dc9575b50611da4906111a4565b8103611db3575b808080611c8e565b611dc291936117b78287611b22565b9138611dab565b80611da492966117b7611de693611de0600d611286565b8b6119b6565b9490611d9a565b611e019297506117b782611de0600e611286565b943880611d88565b611e168461106289610fda565b611e266117526103686009610fae565b1115611c8957610cfd8761181160405190565b50611c83611e4861042a610c63565b6001600160a01b038816149050611c81565b506001600160a01b0385166001600160a01b03871614611c7a565b50611e8161042a610c63565b6001600160a01b03891614611c73565b6103689291906000611c1a565b6110219291906118a483335b83611efc565b15611eb757565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b90611f078183610ff6565b6000198103611f17575b50505050565b611f2b93611067916110e782821015611eb0565b38808080611f11565b61035290611f40610d01565b61035290611f4c6113fd565b611f5761140b611269565b611f645761035290611f7f565b604051636cb5913960e01b8152600490fd5b61035290611f34565b6103529033611b22565b611b22565b9061035291611f9b610d01565b9061035291611fa86113fd565b90611fb461140b611269565b611f645761035291611fcb565b9061035291611f8e565b6103529190611f898233611eaa565b611fe2610d01565b610352611ff061140b61125f565b611ffc57610352612086565b60405163f00085b960e01b8152600490fd5b610352611fda565b61201e6113fd565b610352612046565b9060ff90610dd4565b9061203f610368610df592151590565b8254612026565b6120526001600561202f565b336120817f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258916104f160405190565b0390a1565b610352612016565b612096610d01565b6103526120a461140b61125f565b611ffc576103526120fe565b61035261208e565b6120c0612149565b6103526120cf6000600561202f565b336120817f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa916104f160405190565b6103526120b8565b1561210d57565b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b610352612154610e54565b612106565b9061036891612166610d01565b9061217891612173612802565b61230a565b90610352612834565b610368670de0b6b3a76400006111a4565b9081526040810192916103529160200152565b0152565b6103686706f05b59d3b200006111a4565b905051906103528261033c565b9060208282031261033757610368916121ba565b6103686127106111a4565b9050519061035282610436565b9060208282031261033757610368916121e6565b80151561033e565b9050519061035282612207565b90602082820312610337576103689161220f565b6001600160a01b0390911681526040810192916103529160200152565b90916060828403126103375761036861226684846121ba565b9361227481602086016121ba565b936040016121ba565b610475906111a4565b91946122d46121a5929897956122ca60a0966122c06103529a6122b960c08a019e60008b01906001600160a01b03169052565b6020890152565b604087019061227d565b606085019061227d565b6001600160a01b03166080830152565b9060ff60a01b9060a01b610dd4565b90612303610368610df592151590565b82546122e4565b503461231660146115a1565b61278f57612322612181565b808310801561277c575b61275957506123396121a9565b808210612737575061235461234d30610945565b928361188d565b50612382602061236a6116c86116c86008611286565b6370a082319061237960405190565b93849260e01b90565b82526001600160a01b038616600483015260249082905afa9081156116e157600091612709575b506123d86123d16123c36123bd6013610fae565b8561285c565b6123cb6121db565b9061288b565b809361283f565b906123e96117526103686007610fae565b116126f7575b6123fa6116c861094e565b9261240d612406610fb8565b85836111c8565b63c45a015561242561241e60405190565b9160e01b90565b8152602081600481885afa9081156116e15761244d916116c8916000916126d9575b50610945565b9063c9c653969163ad5c46489061246d61246660405190565b9260e01b90565b82526020826004818a5afa9081156116e1576124ca946020936000936126b3575b5060006124ab9161249e60405190565b9788958694859360e01b90565b83526001600160a01b03808a1660048501521660248301526044820190565b03925af19182156116e157612522926124ed91600091612685575b50601461129f565b60206124ff6116c86116c86014611286565b63095ea7b390612516600080199361249e60405190565b83528c60048401612230565b03925af19182156116e157606092612659575b5063f305d7199461257161254883610fda565b9460009761257c612557610c63565b42908b8061256460405190565b9b8c9a8b998a9860e01b90565b885260048801612286565b03925af180156116e15761262b575b50612598600160146122f3565b6125a1826111a4565b81116125f9575b50506125b46014611286565b6125de7f57a9f98b233034883786b9c47f1f6fabcf1655e39d3213b7287b926ca387136e91610945565b906125e860405190565b600090a26103686116c86014611286565b8180809261260d6116c86116c8600e611286565b828215612622575bf1156116e15738806125a8565b506108fc612615565b61264b9060603d8111612652575b6126438183610f42565b81019061224d565b505061258b565b503d612639565b6126799060203d811161267e575b6126718183610f42565b81019061221c565b612535565b503d612667565b6126a6915060203d81116126ac575b61269e8183610f42565b8101906121f3565b386124e5565b503d612694565b6124ab9193506126d1600091863d81116126ac5761269e8183610f42565b93915061248e565b6126f1915060203d81116126ac5761269e8183610f42565b38612447565b905061270360006111a4565b906123ef565b61272a915060203d8111612730575b6127228183610f42565b8101906121c7565b386123a9565b503d612718565b90610cfd61274460405190565b62fdf57560e51b815292839260048401612192565b82610cfd61276660405190565b63c7bcc1b960e01b815292839260048401612192565b506127886107c2610c63565b831161232c565b60405163250856ab60e21b8152600490fd5b610368906000612159565b61036860026111a4565b156127bd57565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b61035261280f6006610fae565b61282361281a6127ac565b918214156127b6565b60066111b1565b61036860016111a4565b61035261282361282a565b61036891906115ab565b8181029291811591840414171561104957565b6103689190612849565b634e487b7160e01b600052601260045260246000fd5b8115612886570490565b612866565b610368919061287c565b610352906128a1610d01565b6128ab6008611286565b6128bb610d1861042a6000610c8a565b036112e05761035290600861129f565b61035290612895565b610352906128e0610d01565b6103529060076111b1565b610352906128d4565b6128fc612802565b61290461290c565b610352612834565b61291530610945565b61291e81610fda565b9060009161292b836111a4565b8111612976575b5031612941610368600b610fae565b811161294b575050565b8180809261295d6116c86116c8610c63565b82821561296d575bf1156116e157565b506108fc612965565b61169261298d91612987600a610fae565b90612db4565b38612932565b6103526128f4565b91906000926129a9846111a4565b80946129c4610d1861042a6129be600d611286565b93610c8a565b14612a29576129d6610368600f610fae565b14159081612a0f575b506129e75750565b610368919250612a01906129fb600f610fae565b90612849565b612a096121db565b9061287c565b9050612a21610d1861042a600d611286565b1415386129df565b93505050565b9190600092612a3d846111a4565b8094612a52610d1861042a6129be600e611286565b14612a2957612a646103686012610fae565b14159081612a89575b50612a755750565b610368919250612a01906129fb6012610fae565b9050612a9b610d1861042a600e611286565b141538612a6d565b90612aae60006111a4565b9182612abd6103686011610fae565b03612ac55750565b610368919250612a01906129fb6011610fae565b61290490612ae5612802565b612b10565b9060ff60a81b9060a81b610dd4565b90612b09610368610df592151590565b8254612aea565b612b2590612b2060016014612af9565b612c7d565b61035260006014612af9565b90610352612b3e60405190565b9283610f42565b67ffffffffffffffff8111610f645760208091020190565b90612b6f612b6a83612b45565b612b31565b918252565b369037565b90610352612b8f612b8984612b5d565b93612b45565b601f190160208401612b74565b634e487b7160e01b600052603260045260246000fd5b90612bbb825190565b811015612bcc576020809102010190565b612b9c565b90612bf1612bea612be0845190565b8084529260200190565b9260200190565b9060005b818110612c025750505090565b909192612c28612c2160019286516001600160a01b0316815260200190565b9460200190565b929101612bf5565b90612c6b6121a59161035296989795612c5e608096612c5460a08801946000890152565b602087019061227d565b8482036040860152612bd1565b6001600160a01b039097166060830152565b612c8f612c8a60026111a4565b612b79565b612c9830610945565b90600092612cc083612cb2612cac876111a4565b85612bb2565b906001600160a01b03169052565b612ccb6116c861094e565b63ad5c4648612cdc61241e60405190565b8152602081600481855afa80156116e157612d0c918791612d8d575b50612cb2612d0660016111a4565b86612bb2565b612d178282866111c8565b63791ac947934290823b15610337578695612d55612d4a938897938894612d3d60405190565b9a8b998a98899760e01b90565b875260048701612c30565b03925af180156116e157612d67575050565b8161035292903d10612d86575b612d7e8183610f42565b81019061038c565b503d612d74565b612da5915060203d81116126ac5761269e8183610f42565b38612cf8565b61035290612ad9565b9080821015612dc1575090565b905090565b60601b15612dd057565b63d92e233d6000526004601cfdfea26469706673582212203772d99424b0f5238201a53e7c3f08897a2c02c13ca35a3a279108729d5b10d664736f6c63430008140033a2646970667358221220c4dbcea16149ca69debfe4463dbcb6ec73933096c015a07bb3ff8f80e2aedb8564736f6c63430008140033",
  "devdoc": {
    "author": "@neuro_0x",
    "details": "A factory library to deploy instances of the CoinGenieERC20 contract.",
    "kind": "dev",
    "methods": {
      "launchToken(string,string,uint256,address,(bool,bool,bool),uint256,uint256,uint256,address,address,uint256,uint256,address)": {
        "details": "Creates a new instance of the CoinGenieERC20 contract",
        "params": {
          "affilateFeeRecipient": "- the address to receive the affiliate fee",
          "autoWithdrawThreshold": "- the threshold at which the contract will automatically withdraw the tax fees",
          "burnPercentage": "- the percent in basis points to burn on every tx if this token is deflationary",
          "coinGenieTreasury": "- the address to receive the royalty fee",
          "customConfigProps": "- a struct of configuration booleans for the token",
          "feePercentage": "- the percent in basis points to use as a tax",
          "feeRecipient": "- the address to receive the tax fees",
          "initialSupply": "- the initial supply of the token",
          "maxPerWallet": "- the maximum amount of tokens allowed to be held by one wallet",
          "maxTaxSwap": "- the maximum amount of tokens allowed to be swapped at once by manual or autoswap",
          "name": "- the name of the token",
          "symbol": "- the ticker symbol of the token",
          "tokenOwner": "- the address that will be the owner of the token"
        },
        "returns": {
          "newToken": "- the CoinGenieERC20 token that was created"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setGenie(address)": {
        "details": "Sets the address of the genie token",
        "params": {
          "genie": "- the address of the genie token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_genie": {
        "details": "The address of the genie token"
      }
    },
    "title": "ERC20Factory",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "GenieAlreadySet()": [
        {
          "notice": "Error thrown when the genie is already set."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/ERC20Factory.sol:ERC20Factory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6207,
        "contract": "src/ERC20Factory.sol:ERC20Factory",
        "label": "_genie",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}
