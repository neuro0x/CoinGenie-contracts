{
  "address": "0x23ea332fB84032A477A6FDfEF4874845cCce37d8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BeforeUnlockDate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLockDate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MigratorNotSet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        }
      ],
      "name": "NotUniPair",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockDate",
          "type": "uint256"
        }
      ],
      "name": "OnDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getLockedTokenAtIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumLockedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "getNumLocksForToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getUserLockForTokenAtIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getUserLockedTokenAtIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserNumLockedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "getUserNumLocksForToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "incrementLock",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lockDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockID",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct LiquidityLocker.TokenLock",
          "name": "_userLock",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOfLPToLock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockDate",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "withdrawer",
          "type": "address"
        }
      ],
      "name": "lockLPToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lockDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockID",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct LiquidityLocker.TokenLock",
          "name": "tokenLock",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Migrator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlockDate",
          "type": "uint256"
        }
      ],
      "name": "relock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeRecipient_",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Migrator",
          "name": "_migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenLocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockID",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferLockOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x349441e903cc74de18581f049e2c4f7b188404083c8ee6554533685e647c84cb",
  "receipt": {
    "to": null,
    "from": "0x633Bf832Dc39C0025a7aEaa165ec91ACF02063D5",
    "contractAddress": "0x23ea332fB84032A477A6FDfEF4874845cCce37d8",
    "transactionIndex": 30,
    "gasUsed": "1920296",
    "logsBloom": "0x
    "blockHash": "0x81e4bea1709cf58cfe172658930a7f9deb8e41514e509a6760d39be03ab6c193",
    "transactionHash": "0x349441e903cc74de18581f049e2c4f7b188404083c8ee6554533685e647c84cb",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 9741565,
        "transactionHash": "0x349441e903cc74de18581f049e2c4f7b188404083c8ee6554533685e647c84cb",
        "address": "0x23ea332fB84032A477A6FDfEF4874845cCce37d8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000633bf832dc39c0025a7aeaa165ec91acf02063d5"
        ],
        "data": "0x",
        "logIndex": 39,
        "blockHash": "0x81e4bea1709cf58cfe172658930a7f9deb8e41514e509a6760d39be03ab6c193"
      }
    ],
    "blockNumber": 9741565,
    "cumulativeGasUsed": "7341737",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000",
    "0xACE1599987c164049b73bc34019767ef3bE2F574"
  ],
  "numDeployments": 11,
  "solcInputHash": "0dd1326e2579497d719fb151f7d7651b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BeforeUnlockDate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLockDate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MigratorNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"NotUniPair\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"}],\"name\":\"OnDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLockedTokenAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getNumLocksForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserLockForTokenAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserLockedTokenAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserNumLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getUserNumLocksForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"incrementLock\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct LiquidityLocker.TokenLock\",\"name\":\"_userLock\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOfLPToLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"withdrawer\",\"type\":\"address\"}],\"name\":\"lockLPToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct LiquidityLocker.TokenLock\",\"name\":\"tokenLock\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Migrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockDate\",\"type\":\"uint256\"}],\"name\":\"relock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Migrator\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferLockOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@neuro_0x\",\"details\":\"A contract for locking Uniswap V2 liquidity pool tokens for specified periods.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Creates a new LiquidityLocker contract\",\"params\":{\"_fee\":\"The fee amount to use\",\"_feeRecipient\":\"The address to send fees to\"}},\"getLockedTokenAtIndex(uint256)\":{\"details\":\"Get the address of a locked token at an index.\",\"params\":{\"_index\":\"The index of the token.\"}},\"getNumLockedTokens()\":{\"details\":\"Get the total number of locked tokens\"},\"getNumLocksForToken(address)\":{\"details\":\"Get the number of locks for a specific token.\",\"params\":{\"_lpToken\":\"The address of the LP token.\"}},\"getUserLockForTokenAtIndex(address,address,uint256)\":{\"details\":\"Get the lock for a specific user and token at an index.\",\"params\":{\"_index\":\"The index of the lock.\",\"_lpToken\":\"The address of the LP token.\",\"_user\":\"The address of the user.\"},\"returns\":{\"_0\":\"The lock date.\",\"_1\":\"Amount of tokens locked.\",\"_2\":\"Initial amount of tokens locked.\",\"_3\":\"Unlock date of the lock.\",\"_4\":\"Lock ID of the lock.\",\"_5\":\"Owner of the lock.\"}},\"getUserLockedTokenAtIndex(address,uint256)\":{\"details\":\"Get the token address a user has locked at an index.\",\"params\":{\"_index\":\"The index of the token.\",\"_user\":\"The address of the user.\"}},\"getUserNumLockedTokens(address)\":{\"details\":\"Get the number of tokens a user has locked.\",\"params\":{\"_user\":\"The address of the user.\"}},\"getUserNumLocksForToken(address,address)\":{\"details\":\"Get the number of locks for a specific user and token.\",\"params\":{\"_lpToken\":\"The address of the LP token.\",\"_user\":\"The address of the user.\"}},\"incrementLock(address,uint256,uint256,uint256)\":{\"details\":\"increase the amount of tokens per a specific lock, this is preferable to creating a new lock, less fees, and faster loading on our live block explorer\"},\"lockLPToken(address,uint256,uint256,address)\":{\"details\":\"Creates a new lock\",\"params\":{\"amountOfLPToLock\":\"amount of LP tokens to lock\",\"lpToken\":\"the univ2 token address\",\"unlockDate\":\"the unix timestamp (in seconds) until unlock\",\"withdrawer\":\"the user who can withdraw liquidity once the lock expires\"}},\"migrate(address,uint256,uint256,uint256)\":{\"details\":\"migrates liquidity to uniswap v3\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"relock(address,uint256,uint256,uint256)\":{\"details\":\"extend a lock with a new unlock date, _index and _lockID ensure the correct lock is changed this prevents errors when a user performs multiple tx per block possibly with varying gas prices\",\"params\":{\"_index\":\"the index of the lock for the token\",\"_lockID\":\"the lockID of the lock for the token\",\"_lpToken\":\"the univ2 token address\",\"_unlockDate\":\"the new unix timestamp (in seconds) until unlock\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setFee(uint256)\":{\"details\":\"Set the fee amount\",\"params\":{\"amount\":\"The fee amount to use\"}},\"setFeeRecipient(address)\":{\"details\":\"Set the fee recipient\",\"params\":{\"feeRecipient_\":\"The address to send fees to\"}},\"setMigrator(address)\":{\"details\":\"Set the migrator contract which allows locked lp tokens to be migrated to uniswap v3\",\"params\":{\"_migrator\":\"The address of the migrator contract\"}},\"transferLockOwnership(address,uint256,uint256,address)\":{\"details\":\"transfer a lock to a new owner, e.g. presale project -> project owner\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,uint256,uint256,uint256)\":{\"details\":\"withdraw a specified amount from a lock. _index and _lockID ensure the correct lock is changed this prevents errors when a user performs multiple tx per block possibly with varying gas prices\"}},\"title\":\"LiquidityLocker\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/LiquidityLocker.sol\":\"LiquidityLocker\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363935343137343937323034\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"lib/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"lib/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"lib/v2-periphery/contracts/interfaces/IUniswapV2Migrator.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Migrator {\\n    function migrate(address token, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external;\\n}\\n\",\"keccak256\":\"0xa83ac0f597c04134b3ea423fd55d3077e952197c1991e23c4e304bfb35a90124\"},\"src/LiquidityLocker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\nimport { EnumerableSet } from \\\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { IERC20 } from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeMath } from \\\"lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\\\";\\nimport { Ownable } from \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport { IUniswapV2Factory } from \\\"lib/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport { IUniswapV2Pair } from \\\"lib/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport { IUniswapV2Migrator } from \\\"lib/v2-periphery/contracts/interfaces/IUniswapV2Migrator.sol\\\";\\n\\nimport { SafeTransfer } from \\\"./lib/SafeTransfer.sol\\\";\\n\\n/**\\n * @title LiquidityLocker\\n * @author @neuro_0x\\n * @dev A contract for locking Uniswap V2 liquidity pool tokens for specified periods.\\n */\\ncontract LiquidityLocker is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    uint256 public fee;\\n    address public feeRecipient;\\n\\n    error InvalidAmount();\\n    error InvalidRecipient();\\n    error InvalidLockDate();\\n    error LockMismatch();\\n    error BeforeUnlockDate();\\n    error OwnerAlreadySet();\\n    error MigratorNotSet();\\n    error NotUniPair(address lpToken);\\n\\n    IUniswapV2Factory private constant _UNISWAP_V2_FACTORY =\\n        IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\n\\n    struct User {\\n        EnumerableSet.AddressSet lockedTokens; // records all tokens the user has locked\\n        mapping(address => uint256[]) locksForToken; // map erc20 address to lock id for that token\\n    }\\n\\n    struct TokenLock {\\n        uint256 lockDate; // the date the token was locked\\n        uint256 amount; // the amount of tokens still locked (initialAmount minus withdrawls)\\n        uint256 initialAmount; // the initial lock amount\\n        uint256 unlockDate; // the date the token can be withdrawn\\n        uint256 lockID; // lockID nonce per uni pair\\n        address owner;\\n    }\\n\\n    mapping(address userAddress => User user) private _users;\\n\\n    EnumerableSet.AddressSet private _lockedTokens;\\n    mapping(address pair => TokenLock[] locks) public tokenLocks; // map univ2 pair to all its locks\\n\\n    IUniswapV2Migrator public migrator;\\n\\n    event OnWithdraw(address lpToken, uint256 amount);\\n    event OnDeposit(address lpToken, address user, uint256 amount, uint256 lockDate, uint256 unlockDate);\\n\\n    /**\\n     * @dev Creates a new LiquidityLocker contract\\n     * @param _fee The fee amount to use\\n     * @param _feeRecipient The address to send fees to\\n     */\\n    constructor(uint256 _fee, address _feeRecipient) {\\n        fee = _fee;\\n        feeRecipient = _feeRecipient;\\n    }\\n\\n    /**\\n     * @dev Set the fee amount\\n     * @param amount The fee amount to use\\n     */\\n    function setFee(uint256 amount) external onlyOwner {\\n        fee = amount;\\n    }\\n\\n    /**\\n     * @dev Set the fee recipient\\n     * @param feeRecipient_ The address to send fees to\\n     */\\n    function setFeeRecipient(address feeRecipient_) external onlyOwner {\\n        feeRecipient = feeRecipient_;\\n    }\\n\\n    /**\\n     * @dev Set the migrator contract which allows locked lp tokens to be migrated to uniswap v3\\n     * @param _migrator The address of the migrator contract\\n     */\\n    function setMigrator(IUniswapV2Migrator _migrator) public onlyOwner {\\n        migrator = _migrator;\\n    }\\n\\n    /**\\n     * @dev Creates a new lock\\n     * @param lpToken the univ2 token address\\n     * @param amountOfLPToLock amount of LP tokens to lock\\n     * @param unlockDate the unix timestamp (in seconds) until unlock\\n     * @param withdrawer the user who can withdraw liquidity once the lock expires\\n     */\\n    function lockLPToken(\\n        IERC20 lpToken,\\n        uint256 amountOfLPToLock,\\n        uint256 unlockDate,\\n        address payable withdrawer\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        returns (TokenLock memory tokenLock)\\n    {\\n        if (msg.value < fee) {\\n            revert InvalidAmount();\\n        }\\n\\n        if (amountOfLPToLock == 0) {\\n            revert InvalidAmount();\\n        }\\n\\n        if (unlockDate > 10_000_000_000) {\\n            revert InvalidLockDate();\\n        }\\n\\n        // ensure this pair is a univ2 pair by querying the factory\\n        IUniswapV2Pair lpair = IUniswapV2Pair(address(lpToken));\\n        address factoryPairAddress = _UNISWAP_V2_FACTORY.getPair(lpair.token0(), lpair.token1());\\n\\n        if (factoryPairAddress != address(lpToken)) {\\n            revert NotUniPair(address(lpToken));\\n        }\\n\\n        SafeTransfer.safeTransferFrom(address(lpToken), _msgSender(), address(this), amountOfLPToLock);\\n\\n        tokenLock.lockDate = block.timestamp;\\n        tokenLock.amount = amountOfLPToLock;\\n        tokenLock.initialAmount = amountOfLPToLock;\\n        tokenLock.unlockDate = unlockDate;\\n        tokenLock.lockID = tokenLocks[address(lpToken)].length;\\n        tokenLock.owner = withdrawer;\\n\\n        // record the lock for the univ2pair\\n        tokenLocks[address(lpToken)].push(tokenLock);\\n        _lockedTokens.add(address(lpToken));\\n\\n        // record the lock for the user\\n        User storage user = _users[withdrawer];\\n        user.lockedTokens.add(address(lpToken));\\n        uint256[] storage userLocks = user.locksForToken[address(lpToken)];\\n        userLocks.push(tokenLock.lockID);\\n\\n        payable(feeRecipient).transfer(msg.value);\\n\\n        emit OnDeposit(address(lpToken), _msgSender(), tokenLock.amount, tokenLock.lockDate, tokenLock.unlockDate);\\n    }\\n\\n    /**\\n     * @dev extend a lock with a new unlock date, _index and _lockID ensure the correct lock is changed\\n     * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\\n     * @param _lpToken the univ2 token address\\n     * @param _index the index of the lock for the token\\n     * @param _lockID the lockID of the lock for the token\\n     * @param _unlockDate the new unix timestamp (in seconds) until unlock\\n     */\\n    function relock(IERC20 _lpToken, uint256 _index, uint256 _lockID, uint256 _unlockDate) external nonReentrant {\\n        if (_unlockDate > 10_000_000_000) {\\n            revert InvalidLockDate();\\n        }\\n\\n        // timestamp entered in seconds\\n        uint256 lockID = _users[_msgSender()].locksForToken[address(_lpToken)][_index];\\n        TokenLock storage userLock = tokenLocks[address(_lpToken)][lockID];\\n\\n        if (lockID != _lockID || userLock.owner != _msgSender()) {\\n            revert LockMismatch();\\n        }\\n\\n        if (userLock.unlockDate > _unlockDate) {\\n            revert BeforeUnlockDate();\\n        }\\n\\n        userLock.unlockDate = _unlockDate;\\n    }\\n\\n    /**\\n     * @dev withdraw a specified amount from a lock. _index and _lockID ensure the correct lock is changed\\n     * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\\n     */\\n    function withdraw(IERC20 _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external nonReentrant {\\n        if (_amount == 0) {\\n            revert InvalidAmount();\\n        }\\n\\n        uint256 lockID = _users[_msgSender()].locksForToken[address(_lpToken)][_index];\\n        TokenLock storage userLock = tokenLocks[address(_lpToken)][lockID];\\n\\n        if (lockID != _lockID || userLock.owner != _msgSender()) {\\n            revert LockMismatch();\\n        }\\n\\n        if (userLock.unlockDate > block.timestamp) {\\n            revert BeforeUnlockDate();\\n        }\\n\\n        userLock.amount = userLock.amount - _amount;\\n\\n        // clean user storage\\n        if (userLock.amount == 0) {\\n            uint256[] storage userLocks = _users[_msgSender()].locksForToken[address(_lpToken)];\\n            userLocks[_index] = userLocks[userLocks.length - 1];\\n            userLocks.pop();\\n            if (userLocks.length == 0) {\\n                _users[_msgSender()].lockedTokens.remove(address(_lpToken));\\n            }\\n        }\\n\\n        SafeTransfer.safeTransfer(address(_lpToken), _msgSender(), _amount);\\n        emit OnWithdraw(address(_lpToken), _amount);\\n    }\\n\\n    /**\\n     * @dev increase the amount of tokens per a specific lock, this is preferable to creating a new lock, less fees,\\n     * and faster loading on our live block explorer\\n     */\\n    function incrementLock(\\n        IERC20 _lpToken,\\n        uint256 _index,\\n        uint256 _lockID,\\n        uint256 _amount\\n    )\\n        external\\n        nonReentrant\\n        returns (TokenLock memory _userLock)\\n    {\\n        if (_amount == 0) {\\n            revert InvalidAmount();\\n        }\\n\\n        uint256 lockID = _users[_msgSender()].locksForToken[address(_lpToken)][_index];\\n        TokenLock storage userLock = tokenLocks[address(_lpToken)][lockID];\\n\\n        if (lockID != _lockID || userLock.owner != _msgSender()) {\\n            revert LockMismatch();\\n        }\\n\\n        SafeTransfer.safeTransferFrom(address(_lpToken), address(_msgSender()), address(this), _amount);\\n\\n        userLock.amount = userLock.amount + _amount;\\n\\n        emit OnDeposit(address(_lpToken), _msgSender(), userLock.amount, userLock.lockDate, userLock.unlockDate);\\n\\n        return userLock;\\n    }\\n\\n    /**\\n     * @dev transfer a lock to a new owner, e.g. presale project -> project owner\\n     */\\n    function transferLockOwnership(\\n        address _lpToken,\\n        uint256 _index,\\n        uint256 _lockID,\\n        address payable _newOwner\\n    )\\n        external\\n    {\\n        if (_newOwner == owner()) {\\n            revert OwnerAlreadySet();\\n        }\\n\\n        uint256 lockID = _users[_msgSender()].locksForToken[_lpToken][_index];\\n        TokenLock storage transferredLock = tokenLocks[_lpToken][lockID];\\n\\n        if (lockID != _lockID || transferredLock.owner != _msgSender()) {\\n            revert LockMismatch();\\n        }\\n\\n        // record the lock for the new Owner\\n        User storage user = _users[_newOwner];\\n        user.lockedTokens.add(_lpToken);\\n\\n        uint256[] storage userLocks = user.locksForToken[_lpToken];\\n        userLocks.push(transferredLock.lockID);\\n\\n        // remove the lock from the old owner\\n        uint256[] storage userLocks2 = _users[_msgSender()].locksForToken[_lpToken];\\n        userLocks2[_index] = userLocks2[userLocks2.length - 1];\\n        userLocks2.pop();\\n\\n        if (userLocks2.length == 0) {\\n            _users[_msgSender()].lockedTokens.remove(_lpToken);\\n        }\\n\\n        transferredLock.owner = _newOwner;\\n    }\\n\\n    /**\\n     * @dev migrates liquidity to uniswap v3\\n     */\\n    function migrate(IERC20 _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external nonReentrant {\\n        if (address(migrator) == address(0)) {\\n            revert MigratorNotSet();\\n        }\\n\\n        if (_amount == 0) {\\n            revert InvalidAmount();\\n        }\\n\\n        uint256 lockID = _users[_msgSender()].locksForToken[address(_lpToken)][_index];\\n        TokenLock storage userLock = tokenLocks[address(_lpToken)][lockID];\\n\\n        if (lockID != _lockID || userLock.owner != _msgSender()) {\\n            revert LockMismatch();\\n        }\\n\\n        userLock.amount = userLock.amount - _amount;\\n\\n        // clean user storage\\n        if (userLock.amount == 0) {\\n            uint256[] storage userLocks = _users[_msgSender()].locksForToken[address(_lpToken)];\\n            userLocks[_index] = userLocks[userLocks.length - 1];\\n            userLocks.pop();\\n            if (userLocks.length == 0) {\\n                _users[_msgSender()].lockedTokens.remove(address(_lpToken));\\n            }\\n        }\\n\\n        IERC20(_lpToken).approve(address(migrator), _amount);\\n        migrator.migrate(address(_lpToken), _amount, userLock.unlockDate, _msgSender(), block.timestamp + 1 days);\\n    }\\n\\n    /**\\n     * @dev Get the number of locks for a specific token.\\n     * @param _lpToken The address of the LP token.\\n     */\\n    function getNumLocksForToken(address _lpToken) external view returns (uint256) {\\n        return tokenLocks[_lpToken].length;\\n    }\\n\\n    /**\\n     * @dev Get the total number of locked tokens\\n     */\\n    function getNumLockedTokens() external view returns (uint256) {\\n        return _lockedTokens.length();\\n    }\\n\\n    /**\\n     * @dev Get the address of a locked token at an index.\\n     * @param _index The index of the token.\\n     */\\n    function getLockedTokenAtIndex(uint256 _index) external view returns (address) {\\n        return _lockedTokens.at(_index);\\n    }\\n\\n    /**\\n     * @dev Get the number of tokens a user has locked.\\n     * @param _user The address of the user.\\n     */\\n    function getUserNumLockedTokens(address _user) external view returns (uint256) {\\n        User storage user = _users[_user];\\n        return user.lockedTokens.length();\\n    }\\n\\n    /**\\n     * @dev Get the token address a user has locked at an index.\\n     * @param _user The address of the user.\\n     * @param _index The index of the token.\\n     */\\n    function getUserLockedTokenAtIndex(address _user, uint256 _index) external view returns (address) {\\n        User storage user = _users[_user];\\n        return user.lockedTokens.at(_index);\\n    }\\n\\n    /**\\n     * @dev Get the number of locks for a specific user and token.\\n     * @param _user The address of the user.\\n     * @param _lpToken The address of the LP token.\\n     */\\n    function getUserNumLocksForToken(address _user, address _lpToken) external view returns (uint256) {\\n        User storage user = _users[_user];\\n        return user.locksForToken[_lpToken].length;\\n    }\\n\\n    /**\\n     * @dev Get the lock for a specific user and token at an index.\\n     * @param _user The address of the user.\\n     * @param _lpToken The address of the LP token.\\n     * @param _index The index of the lock.\\n     * @return The lock date.\\n     * @return Amount of tokens locked.\\n     * @return Initial amount of tokens locked.\\n     * @return Unlock date of the lock.\\n     * @return Lock ID of the lock.\\n     * @return Owner of the lock.\\n     */\\n    function getUserLockForTokenAtIndex(\\n        address _user,\\n        address _lpToken,\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (uint256, uint256, uint256, uint256, uint256, address)\\n    {\\n        uint256 lockID = _users[_user].locksForToken[_lpToken][_index];\\n        TokenLock storage tokenLock = tokenLocks[_lpToken][lockID];\\n        return (\\n            tokenLock.lockDate,\\n            tokenLock.amount,\\n            tokenLock.initialAmount,\\n            tokenLock.unlockDate,\\n            tokenLock.lockID,\\n            tokenLock.owner\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x47b347e63e3cbef509a1307a9cc291416d55474002889f1700f401ca9ac58bbe\",\"license\":\"GPL-3.0\"},\"src/lib/SafeTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\nlibrary SafeTransfer {\\n    error TransferFailed();\\n\\n    /**\\n     * @dev Sends `amount` (in wei) ETH to `to`.\\n     * @param to The address to send the ETH to.\\n     * @param amount The amount of ETH to send.\\n     */\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gas(), to, amount, 0, 0, 0, 0)) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                // bytes4(keccak256(bytes(\\\"ETHTransferFailed()\\\"))) = 0xb12d13eb\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Validates that the address is not the zero address using assembly.\\n     * @dev Reverts if the address is the zero address.\\n     * @param addr The address to validate.\\n     */\\n    function validateAddress(address addr) internal pure {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            if iszero(shl(96, addr)) {\\n                // Store the function selector of `ZeroAddress()`.\\n                // bytes4(keccak256(bytes(\\\"ZeroAddress()\\\"))) = 0xd92e233d\\n                mstore(0x00, 0xd92e233d)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to transfer ERC20 tokens without the need for SafeERC20.\\n     * @dev Reverts if the ERC20 transfer fails.\\n     * @param tokenAddress The address of the ERC20 token.\\n     * @param from The address to transfer the tokens from.\\n     * @param to The address to transfer the tokens to.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function safeTransferFrom(address tokenAddress, address from, address to, uint256 amount) internal returns (bool) {\\n        (bool success, bytes memory data) =\\n        // solhint-disable-next-line avoid-low-level-calls\\n         tokenAddress.call(abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", from, to, amount));\\n        if (!success) {\\n            if (data.length != 0) {\\n                // bubble up error\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(data)\\n                    revert(add(32, data), returndata_size)\\n                }\\n            } else {\\n                revert TransferFailed();\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Helper function to transfer ERC20 tokens without the need for SafeERC20.\\n    /// @dev Reverts if the ERC20 transfer fails.\\n    /// @param tokenAddress The address of the ERC20 token.\\n    /// @param to The address to transfer the tokens to.\\n    /// @param amount The amount of tokens to transfer.\\n    function safeTransfer(address tokenAddress, address to, uint256 amount) internal returns (bool) {\\n        (bool success, bytes memory data) =\\n        // solhint-disable-next-line avoid-low-level-calls\\n         tokenAddress.call(abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", to, amount));\\n        if (!success) {\\n            if (data.length != 0) {\\n                // bubble up error\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(data)\\n                    revert(add(32, data), returndata_size)\\n                }\\n            } else {\\n                revert TransferFailed();\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xcd0139a88ea2bcaa2dc562192f25f6fe7e18dc526081b42f9c1f8ef47a6aefa9\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523462000031576200001f62000018620000fc565b90620001bb565b604051611fe9620002908239611fe990f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200006e57604052565b62000036565b906200008b6200008360405190565b92836200004c565b565b805b036200003157565b905051906200008b826200008d565b6001600160a01b031690565b90565b6001600160a01b0381166200008f565b905051906200008b82620000b5565b91906040838203126200003157620000b290620000f2818562000097565b93602001620000c5565b6200011f6200227980380380620001138162000074565b928339810190620000d4565b9091565b90600019905b9181191691161790565b620000b2620000b2620000b29290565b9062000157620000b26200015f9262000133565b825462000123565b9055565b906001600160a01b039062000129565b620000b290620000a6906001600160a01b031682565b620000b29062000173565b620000b29062000189565b90620001b3620000b26200015f9262000194565b825462000163565b90620001d76200008b92620001cf620001eb565b600262000143565b60036200019f565b620000b2600162000133565b620001f56200020b565b6200008b62000203620001df565b600162000143565b6200008b336200022d565b620000b290620000a6565b620000b2905462000216565b62000239600062000221565b90620002478160006200019f565b6200027e620002777f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09362000194565b9162000194565b916200028960405190565b600090a356fe6080604052600436101561001257600080fd5b60003560e01c806314dd79a3146101825780631f2a1d2f1461017d57806323cf3118146101785780634532d77614610173578063469048401461016e57806360491d241461016957806369fe0e2d14610164578063715018a61461015f578063783451e81461015a5780637cd07e47146101555780638da5cb5b14610150578063903df8061461014b578063a396981514610146578063a69d9c4f14610141578063a9b07cea1461013c578063bef497fd14610137578063ccebfa3f14610132578063d4ff493f1461012d578063ddca3f4314610128578063df41bc5f14610123578063e74b981b1461011e578063ee424278146101195763f2fde38b03610187576107ea565b6107ce565b6107b6565b61079c565b610781565b610743565b6106de565b61058d565b610526565b6104a0565b610462565b610446565b6103fe565b6103d7565b610371565b610359565b610341565b610325565b61030a565b6102b8565b61025f565b610234565b6101cb565b600080fd5b805b0361018757565b905035906101a28261018c565b565b90602082820312610187576101b891610195565b90565b6001600160a01b031690565b9052565b34610187576102006101e66101e13660046101a4565b611d33565b604051918291826001600160a01b03909116815260200190565b0390f35b6001600160a01b03811661018e565b905035906101a282610204565b90602082820312610187576101b891610213565b346101875761020061024f61024a366004610220565b611cec565b6040519182918290815260200190565b3461018757610277610272366004610220565b610a7d565b604051005b608081830312610187576102908282610213565b926101b86102a18460208501610195565b936102af8160408601610195565b93606001610195565b34610187576102776102cb36600461027c565b929190916115c2565b600091031261018757565b6101b8916008021c6001600160a01b031690565b906101b891546102df565b6101b8600060036102f3565b346101875761031a3660046102d4565b6102006101e66102fe565b346101875761027761033836600461027c565b9291909161135e565b34610187576102776103543660046101a4565b610a3d565b34610187576103693660046102d4565b61027761083a565b34610187576103813660046102d4565b61020061024f611d03565b6101b8600060086102f3565b6101b8906101bb906001600160a01b031682565b6101b890610398565b6101b8906103ac565b6101c7906103b5565b6020810192916101a291906103be565b34610187576103e73660046102d4565b6102006103f261038c565b604051918291826103c7565b346101875761040e3660046102d4565b6102006101e66000546001600160a01b031690565b9190604083820312610187576101b89061043d8185610213565b93602001610195565b34610187576102006101e661045c366004610423565b90611db3565b346101875761020061024f610478366004610220565b611d94565b9190604083820312610187576101b8906104978185610213565b93602001610213565b346101875761020061024f6104b636600461047d565b90611dcb565b805182526101a2919060a09081906104d960208201516020860152565b6104e860408201516040860152565b6104f760608201516060860152565b61050660808201516080860152565b01516001600160a01b0316910152565b60c0810192916101a291906104bc565b346101875761020061054561053c36600461027c565b92919091611888565b60405191829182610516565b608081830312610187576105658282610213565b926101b86105768460208501610195565b936105848160408601610195565b93606001610213565b34610187576102776105a0366004610551565b9291909161189c565b906105b3906103b5565b600052602052604060002090565b634e487b7160e01b600052603260045260246000fd5b80548210156105fa576105f1600691600052602060002090565b91020190600090565b6105c1565b6101b89081565b6101b890546105ff565b91906106206007936000946105a9565b8054821015610687576106349293506105d7565b509061063f82610606565b9161064c60018201610606565b9161065960028301610606565b9161066660038201610606565b916101b8600561067860048501610606565b9301546001600160a01b031690565b8380fd5b91946106c86106cf929897956106c160a0966106ba6101a29a6106b360c08a019e60008b0152565b6020890152565b6040870152565b6060850152565b6080830152565b01906001600160a01b03169052565b34610187576102006106fa6106f4366004610423565b90610610565b9261070a96949692919260405190565b9687968761068b565b9091606082840312610187576101b861072c8484610213565b9361073a8160208601610213565b93604001610195565b34610187576102006106fa610759366004610713565b91611de3565b6101b8916008021c81565b906101b8915461075f565b6101b86000600261076a565b34610187576107913660046102d4565b61020061024f610775565b6102006105456107ad366004610551565b9291909161107e565b34610187576102776107c9366004610220565b610a5d565b34610187576102776107e136600461027c565b92919091611ce0565b34610187576102776107fd366004610220565b61095f565b61080a61089a565b6101a2610828565b6101bb6101b86101b89290565b6101b890610812565b6101a2610835600061081f565b610998565b6101a2610802565b0190565b1561084d57565b60405162461bcd60e51b815280610896600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b6101a26108af6000546001600160a01b031690565b6108c86108bb336101bb565b916001600160a01b031690565b14610846565b6101a2906108da61089a565b61093a565b156108e657565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6101a29061083561094e6101bb600061081f565b6001600160a01b03831614156108df565b6101a2906108ce565b906001600160a01b03905b9181191691161790565b9061098d6101b8610994926103b5565b8254610968565b9055565b6000546001600160a01b0316906109b081600061097d565b6109e36109dd7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936103b5565b916103b5565b916109ed60405190565b600090a3565b6101a2906109ff61089a565b610a32565b9060001990610973565b6101b86101b86101b89290565b90610a2b6101b861099492610a0e565b8254610a04565b6101a2906002610a1b565b6101a2906109f3565b6101a290610a5261089a565b6101a290600361097d565b6101a290610a46565b6101a290610a7261089a565b6101a290600861097d565b6101a290610a66565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff821117610abe57604052565b610a86565b906101a2610ad060405190565b9283610a9c565b6101b860c0610ac3565b610ae9610ad7565b906000825260208080808080870160008152016000815201600081520160008152016000905250565b6101b8610ae1565b90610b2f94939291610b2a6110e8565b610d34565b906101a2611124565b6101b8735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f6103b5565b905051906101a282610204565b90602082820312610187576101b891610b55565b6040513d6000823e3d90fd5b6001600160a01b0390911681526040810192916101a2916020906106cf565b634e487b7160e01b600052600060045260246000fd5b6101a29190610c309060a090600590610bd881610bd2875190565b90610a1b565b610bea60018201610bd2602088015190565b610bfc60028201610bd2604088015190565b610c0e60038201610bd2606088015190565b610c2060048201610bd2608088015190565b019201516001600160a01b031690565b9061097d565b9190610c45576101a291610bb7565b610ba1565b90815491600160401b831015610abe5782610c6d9160016101a2950181556105d7565b90610c36565b80548210156105fa576105f1600191600052602060002090565b9160001960089290920291821b911b610973565b9190610cb26101b861099493610a0e565b908354610c8d565b90815491600160401b831015610abe5782610cdd9160016101a295018155610c73565b90610ca1565b909594926101a294610d29610d3092610d22608096610d1260a088019c60008901906001600160a01b03169052565b6001600160a01b03166020870152565b6040850152565b6060830152565b0152565b919493929482953492610d4a6101b86002610606565b841061106c57600090610d5c82610a0e565b841461106c57610d706402540be400610a0e565b831161105a57610d7f906103b5565b93610d89856103b5565b610d99610d94610b38565b6103b5565b610da763e6a43905926103b5565b630dfe168191610dc0610db960405190565b9360e01b90565b8352602083600481855afa918215610fa757610df2938793611038575b5060405193602091859163d21220a760e01b90565b825260049082905afa928315610fa7578693611014575b50610e2a60209394610e35610e1d60405190565b9687958694859460e01b90565b845260048401610b82565b03915afa908115610fa7578391610fe6575b50610e5a6001600160a01b0387166108bb565b03610fb55781808092610e6a3390565b9887610e75306103b5565b90610e81918c8c611ee9565b508083019a8990610e90428e52565b6020830199610e9d818c52565b604084015260608301988952600792610eb683856105a9565b54608082019081529383610ec9846103b5565b6001600160a01b031660a0840152610ee0916105a9565b90610eea91610c4a565b610ef5826005611141565b50610f019060046105a9565b610f0d82828701611141565b5060020190610f1b916105a9565b9051610f2691610cba565b6003546001600160a01b0316610f3b906103b5565b610f44906103b5565b828215610fac575bf115610fa757610f6d610f68610f63610fa2945190565b965190565b915190565b907fb173d70d03f0b8aa29e0087d55b3549db8a6343c5208ce69af3c0de4c0836fe795610f9960405190565b95869586610ce3565b0390a1565b610b76565b506108fc610f4c565b61089685610fc260405190565b630a3f6ee160e21b8152918291600483016001600160a01b03909116815260200190565b611007915060203d811161100d575b610fff8183610a9c565b810190610b62565b38610e47565b503d610ff5565b60209350611031610e2a91853d811161100d57610fff8183610a9c565b9350610e09565b602091935061105390823d811161100d57610fff8183610a9c565b9290610ddd565b604051637b663c4960e01b8152600490fd5b60405163162908e360e11b8152600490fd5b906101b893929161108d610b12565b610b1a565b6101b86002610a0e565b156110a357565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6101a26110f56001610606565b611113611100611092565b91829061110c565b9190565b141561109c565b6001610a1b565b6101b86001610a0e565b6101a261111361111a565b6101b89081906001600160a01b031681565b9061116e61110861116961116460006101b89661115c600090565b5001946103ac565b61112f565b610a0e565b6111b1565b9190610cb26101b86109949390565b90815491600160401b831015610abe57826111a59160016101a295018155610c73565b90611173565b906105b3565b6111c26111be83836111fb565b1590565b156111f4576111ef916111ea9060016111e3846111df8482611182565b5490565b93016111ab565b610a1b565b600190565b5050600090565b6112199160016112149261120d600090565b50016111ab565b610606565b6112266111086000610a0e565b141590565b9061123f93929161123a6110e8565b611247565b6101a2611124565b939291906112596402540be400610a0e565b831161105a576112b66112c36111086112bf6112bb6112a6996112ac60049b8c986112a161129a600261129361128c3390565b809e6105a9565b01956103b5565b80956105a9565b610c73565b9061076a565b95869160076105a9565b6105d7565b5090565b9490565b141590811561132d575b5061130e576003016112de81610606565b82106112ef576101a2929350610a1b565b610896846112fc60405190565b63b9f317a560e01b8152918291820190565b6108968461131b60405190565b63459808cf60e01b8152918291820190565b90506113566108bb61134960058501546001600160a01b031690565b926001600160a01b031690565b1415386112cd565b906101a293929161122b565b9061123f9392916113796110e8565b61140d565b634e487b7160e01b600052601160045260246000fd5b919082039182116113a157565b61137e565b634e487b7160e01b600052603160045260246000fd5b6101a291600091610ca1565b805480156113eb5760001901906113e86113e28383610c73565b906113bc565b55565b6113a6565b6001600160a01b0390911681526040810192916101a29160200152565b929190600061141b81610a0e565b841461106c57600491339361144d6112a6836112a1611446600261143f8b8b6105a9565b019b6103b5565b809b6105a9565b6114696111086114656112bb846112b68d60076105a9565b9390565b1415801561159a575b61130e5761148260038201610606565b42106112ef57846114d095938795936114b460018b95016112146114ae8a6114a984610606565b611394565b82610a1b565b6114c061110884610a0e565b14611508575b5050509050611f7d565b507fbace9fd79d5ea02ed8b43fa96af07e4e8f859a2f71ff878c748f5c22c578028491610fa26114ff60405190565b928392836113f0565b6115639061155a6115286101b8876002611522898c6105a9565b016105a9565b91610cdd6115536112a661154d61153d875490565b6115476001610a0e565b90611394565b86610c73565b9184610c73565b6111df816113c8565b61156f61110883610a0e565b1461157b575b806114c6565b61084261158b92611590956105a9565b6115ce565b5038858282611575565b5060058101546001600160a01b03166115bb6001600160a01b0387166108bb565b1415611472565b906101a293929161136a565b906115e961110861116961116460006101b89661115c600090565b61161a565b6101a291600091611173565b805480156113eb5760001901906113e86116148383610c73565b906115ee565b9061162b61121482600185016111ab565b60009261163784610a0e565b8214611684576101b89261168a94926116959261168f600197889361166461165e86610a0e565b82611394565b8885019161167c611673845490565b61154789610a0e565b82810361169a575b50505090565b6115fa565b016111ab565b6113bc565b6111a56116bd6116c5946116b46112a66111ea9589610c73565b92839188610c73565b8888016111ab565b388080611684565b90610b2f949392916116dd6110e8565b611790565b919082018092116113a157565b906101a26117776005611700610ad7565b9461171161170d82610606565b8752565b61172761172060018301610606565b6020880152565b61173d61173660028301610606565b6040880152565b61175361174c60038301610606565b6060880152565b61176961176260048301610606565b6080880152565b01546001600160a01b031690565b6001600160a01b031660a0840152565b6101b8906116ef565b50929392600091906117a183610a0e565b861461106c5760046117d16112a633946112a16117ca60026117c389886105a9565b01966103b5565b80966105a9565b6117ed6111086117e96112bb846112b68860076105a9565b9790565b14158015611860575b611853575061184b61183f6118378861181d6101b8999a611816306103b5565b8888611ee9565b506112146114ae60018a019261183284610606565b6116e2565b948601610606565b610f6d60038701610606565b0390a1611787565b6108969061131b60405190565b5060058501546001600160a01b03166118816001600160a01b0385166108bb565b14156117f6565b906101b8939291611897610b12565b6116cd565b939290936118b56101bb6000546001600160a01b031690565b6118be836103b5565b146119e0576004856118e56112a683986112a18660026115226118de3390565b80996105a9565b6118fd6111086117e96112bb846112b68960076105a9565b141580156119b8575b6119ab579582849261196c6101a298996119566119456101b861198a9960026119346101b860059e8c6105a9565b61193e8382611141565b50016105a9565b611950878c01610606565b90610cba565b61155a6115286101b8866002611522888b6105a9565b60009061197b61110883610a0e565b14611991575b505050506103b5565b910161097d565b61084261158b926119a1956105a9565b5038808080611981565b6108968761131b60405190565b5060058501546001600160a01b03166119d96001600160a01b0384166108bb565b1415611906565b60405163cf04b1bb60e01b8152600490fd5b9061123f939291611a016110e8565b611a75565b80151561018e565b905051906101a282611a06565b90602082820312610187576101b891611a0e565b909594926101a294611a65610d3092610d22608096611a5e60a088019c60008901906001600160a01b03169052565b6020870152565b6001600160a01b03166060830152565b919290611a8d610d946008546001600160a01b031690565b93600094611aa06108bb6101bb8861081f565b14611cce57611aae85610a0e565b831461106c576004913390611ae06112a6826112a1611ad96002611ad2888b6105a9565b019a6103b5565b809a6105a9565b611afc611108611af86112bb846112b68c60076105a9565b9590565b14158015611ca6575b61130e57611b20600184016112146114ae886114a984610606565b611b2c61110889610a0e565b14611c5c575b5063095ea7b36020611b6b611b52610d946008546001600160a01b031690565b92611b7588611b6060405190565b958694859460e01b90565b84528984016113f0565b03818a8a5af18015610fa757611c30575b50611b9c610d946008546001600160a01b031690565b91611bae600363b7df1d259201610606565b90611bc542611bbf62015180610a0e565b906116e2565b95843b15610187578896611bef948894611bf893611be260405190565b9b8c9a8b998a9860e01b90565b88528701611a2f565b03925af18015610fa757611c0a575050565b816101a292903d10611c29575b611c218183610a9c565b8101906102d4565b503d611c17565b611c509060203d8111611c55575b611c488183610a9c565b810190611a1b565b611b86565b503d611c3e565b611c769061155a6115286101b8896002611522888b6105a9565b611c8261110888610a0e565b14611c8e575b38611b32565b611ca08561158b8861084285886105a9565b50611c88565b5060058301546001600160a01b0316611cc76001600160a01b0384166108bb565b1415611b05565b604051632ed9bf5360e21b8152600490fd5b906101a29392916119f2565b6111df6101b891611cfb600090565b5060076105a9565b6101b860055b611d1f60006101b892611d1a600090565b500190565b60006101b891611d2d600090565b50015490565b6101b8906005611d4c565b611d4c565b6101b890610a0e565b611d71611d6c6101b893611d676000611d7695611d1a600090565b611d7b565b611d43565b610812565b6103ac565b6101b89160006112a692611d8d600090565b5001610c73565b611d0960006108426101b86101b894611dab600090565b5060046105a9565b90611d3e60006108426101b86101b895611dab600090565b6101b89160026115226101b86111df94611dab600090565b9291611e19916112b6611e116112a66112bb94611dfe600090565b506112a185600261152260049c8d6105a9565b9160076105a9565b91611e2383610606565b92611e3060018201610606565b93611e3d60028301610606565b93611e696005611e5a611e5260038701610606565b968601610606565b9401546001600160a01b031690565b91959493929190565b6001600160a01b039182168152911660208201526060810192916101a29160400152565b67ffffffffffffffff8111610abe57602090601f01601f19160190565b90611ec5611ec083611e96565b610ac3565b918252565b3d15611ee457611ed93d611eb3565b903d6000602084013e565b606090565b9091611f2b60009493611f1c8695611eff600090565b506040516323b872dd60e01b602082015294859360248501611e72565b60208201810382520382610a9c565b82602082019151925af1611f45611f40611eca565b911590565b611f4f5750600190565b8051611f5e6111086000610a0e565b14611f6b57805190602001fd5b6040516312171d8360e31b8152600490fd5b600092611f2b8493611f8d600090565b50611f1c611f9a60405190565b63a9059cbb60e01b6020820152938492602484016113f056fea26469706673582212209e535a12121118009ec3ce04b62ca09c7e5dd7992785bca52dfb2b489d496f8664736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806314dd79a3146101825780631f2a1d2f1461017d57806323cf3118146101785780634532d77614610173578063469048401461016e57806360491d241461016957806369fe0e2d14610164578063715018a61461015f578063783451e81461015a5780637cd07e47146101555780638da5cb5b14610150578063903df8061461014b578063a396981514610146578063a69d9c4f14610141578063a9b07cea1461013c578063bef497fd14610137578063ccebfa3f14610132578063d4ff493f1461012d578063ddca3f4314610128578063df41bc5f14610123578063e74b981b1461011e578063ee424278146101195763f2fde38b03610187576107ea565b6107ce565b6107b6565b61079c565b610781565b610743565b6106de565b61058d565b610526565b6104a0565b610462565b610446565b6103fe565b6103d7565b610371565b610359565b610341565b610325565b61030a565b6102b8565b61025f565b610234565b6101cb565b600080fd5b805b0361018757565b905035906101a28261018c565b565b90602082820312610187576101b891610195565b90565b6001600160a01b031690565b9052565b34610187576102006101e66101e13660046101a4565b611d33565b604051918291826001600160a01b03909116815260200190565b0390f35b6001600160a01b03811661018e565b905035906101a282610204565b90602082820312610187576101b891610213565b346101875761020061024f61024a366004610220565b611cec565b6040519182918290815260200190565b3461018757610277610272366004610220565b610a7d565b604051005b608081830312610187576102908282610213565b926101b86102a18460208501610195565b936102af8160408601610195565b93606001610195565b34610187576102776102cb36600461027c565b929190916115c2565b600091031261018757565b6101b8916008021c6001600160a01b031690565b906101b891546102df565b6101b8600060036102f3565b346101875761031a3660046102d4565b6102006101e66102fe565b346101875761027761033836600461027c565b9291909161135e565b34610187576102776103543660046101a4565b610a3d565b34610187576103693660046102d4565b61027761083a565b34610187576103813660046102d4565b61020061024f611d03565b6101b8600060086102f3565b6101b8906101bb906001600160a01b031682565b6101b890610398565b6101b8906103ac565b6101c7906103b5565b6020810192916101a291906103be565b34610187576103e73660046102d4565b6102006103f261038c565b604051918291826103c7565b346101875761040e3660046102d4565b6102006101e66000546001600160a01b031690565b9190604083820312610187576101b89061043d8185610213565b93602001610195565b34610187576102006101e661045c366004610423565b90611db3565b346101875761020061024f610478366004610220565b611d94565b9190604083820312610187576101b8906104978185610213565b93602001610213565b346101875761020061024f6104b636600461047d565b90611dcb565b805182526101a2919060a09081906104d960208201516020860152565b6104e860408201516040860152565b6104f760608201516060860152565b61050660808201516080860152565b01516001600160a01b0316910152565b60c0810192916101a291906104bc565b346101875761020061054561053c36600461027c565b92919091611888565b60405191829182610516565b608081830312610187576105658282610213565b926101b86105768460208501610195565b936105848160408601610195565b93606001610213565b34610187576102776105a0366004610551565b9291909161189c565b906105b3906103b5565b600052602052604060002090565b634e487b7160e01b600052603260045260246000fd5b80548210156105fa576105f1600691600052602060002090565b91020190600090565b6105c1565b6101b89081565b6101b890546105ff565b91906106206007936000946105a9565b8054821015610687576106349293506105d7565b509061063f82610606565b9161064c60018201610606565b9161065960028301610606565b9161066660038201610606565b916101b8600561067860048501610606565b9301546001600160a01b031690565b8380fd5b91946106c86106cf929897956106c160a0966106ba6101a29a6106b360c08a019e60008b0152565b6020890152565b6040870152565b6060850152565b6080830152565b01906001600160a01b03169052565b34610187576102006106fa6106f4366004610423565b90610610565b9261070a96949692919260405190565b9687968761068b565b9091606082840312610187576101b861072c8484610213565b9361073a8160208601610213565b93604001610195565b34610187576102006106fa610759366004610713565b91611de3565b6101b8916008021c81565b906101b8915461075f565b6101b86000600261076a565b34610187576107913660046102d4565b61020061024f610775565b6102006105456107ad366004610551565b9291909161107e565b34610187576102776107c9366004610220565b610a5d565b34610187576102776107e136600461027c565b92919091611ce0565b34610187576102776107fd366004610220565b61095f565b61080a61089a565b6101a2610828565b6101bb6101b86101b89290565b6101b890610812565b6101a2610835600061081f565b610998565b6101a2610802565b0190565b1561084d57565b60405162461bcd60e51b815280610896600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b6101a26108af6000546001600160a01b031690565b6108c86108bb336101bb565b916001600160a01b031690565b14610846565b6101a2906108da61089a565b61093a565b156108e657565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6101a29061083561094e6101bb600061081f565b6001600160a01b03831614156108df565b6101a2906108ce565b906001600160a01b03905b9181191691161790565b9061098d6101b8610994926103b5565b8254610968565b9055565b6000546001600160a01b0316906109b081600061097d565b6109e36109dd7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936103b5565b916103b5565b916109ed60405190565b600090a3565b6101a2906109ff61089a565b610a32565b9060001990610973565b6101b86101b86101b89290565b90610a2b6101b861099492610a0e565b8254610a04565b6101a2906002610a1b565b6101a2906109f3565b6101a290610a5261089a565b6101a290600361097d565b6101a290610a46565b6101a290610a7261089a565b6101a290600861097d565b6101a290610a66565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff821117610abe57604052565b610a86565b906101a2610ad060405190565b9283610a9c565b6101b860c0610ac3565b610ae9610ad7565b906000825260208080808080870160008152016000815201600081520160008152016000905250565b6101b8610ae1565b90610b2f94939291610b2a6110e8565b610d34565b906101a2611124565b6101b8735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f6103b5565b905051906101a282610204565b90602082820312610187576101b891610b55565b6040513d6000823e3d90fd5b6001600160a01b0390911681526040810192916101a2916020906106cf565b634e487b7160e01b600052600060045260246000fd5b6101a29190610c309060a090600590610bd881610bd2875190565b90610a1b565b610bea60018201610bd2602088015190565b610bfc60028201610bd2604088015190565b610c0e60038201610bd2606088015190565b610c2060048201610bd2608088015190565b019201516001600160a01b031690565b9061097d565b9190610c45576101a291610bb7565b610ba1565b90815491600160401b831015610abe5782610c6d9160016101a2950181556105d7565b90610c36565b80548210156105fa576105f1600191600052602060002090565b9160001960089290920291821b911b610973565b9190610cb26101b861099493610a0e565b908354610c8d565b90815491600160401b831015610abe5782610cdd9160016101a295018155610c73565b90610ca1565b909594926101a294610d29610d3092610d22608096610d1260a088019c60008901906001600160a01b03169052565b6001600160a01b03166020870152565b6040850152565b6060830152565b0152565b919493929482953492610d4a6101b86002610606565b841061106c57600090610d5c82610a0e565b841461106c57610d706402540be400610a0e565b831161105a57610d7f906103b5565b93610d89856103b5565b610d99610d94610b38565b6103b5565b610da763e6a43905926103b5565b630dfe168191610dc0610db960405190565b9360e01b90565b8352602083600481855afa918215610fa757610df2938793611038575b5060405193602091859163d21220a760e01b90565b825260049082905afa928315610fa7578693611014575b50610e2a60209394610e35610e1d60405190565b9687958694859460e01b90565b845260048401610b82565b03915afa908115610fa7578391610fe6575b50610e5a6001600160a01b0387166108bb565b03610fb55781808092610e6a3390565b9887610e75306103b5565b90610e81918c8c611ee9565b508083019a8990610e90428e52565b6020830199610e9d818c52565b604084015260608301988952600792610eb683856105a9565b54608082019081529383610ec9846103b5565b6001600160a01b031660a0840152610ee0916105a9565b90610eea91610c4a565b610ef5826005611141565b50610f019060046105a9565b610f0d82828701611141565b5060020190610f1b916105a9565b9051610f2691610cba565b6003546001600160a01b0316610f3b906103b5565b610f44906103b5565b828215610fac575bf115610fa757610f6d610f68610f63610fa2945190565b965190565b915190565b907fb173d70d03f0b8aa29e0087d55b3549db8a6343c5208ce69af3c0de4c0836fe795610f9960405190565b95869586610ce3565b0390a1565b610b76565b506108fc610f4c565b61089685610fc260405190565b630a3f6ee160e21b8152918291600483016001600160a01b03909116815260200190565b611007915060203d811161100d575b610fff8183610a9c565b810190610b62565b38610e47565b503d610ff5565b60209350611031610e2a91853d811161100d57610fff8183610a9c565b9350610e09565b602091935061105390823d811161100d57610fff8183610a9c565b9290610ddd565b604051637b663c4960e01b8152600490fd5b60405163162908e360e11b8152600490fd5b906101b893929161108d610b12565b610b1a565b6101b86002610a0e565b156110a357565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6101a26110f56001610606565b611113611100611092565b91829061110c565b9190565b141561109c565b6001610a1b565b6101b86001610a0e565b6101a261111361111a565b6101b89081906001600160a01b031681565b9061116e61110861116961116460006101b89661115c600090565b5001946103ac565b61112f565b610a0e565b6111b1565b9190610cb26101b86109949390565b90815491600160401b831015610abe57826111a59160016101a295018155610c73565b90611173565b906105b3565b6111c26111be83836111fb565b1590565b156111f4576111ef916111ea9060016111e3846111df8482611182565b5490565b93016111ab565b610a1b565b600190565b5050600090565b6112199160016112149261120d600090565b50016111ab565b610606565b6112266111086000610a0e565b141590565b9061123f93929161123a6110e8565b611247565b6101a2611124565b939291906112596402540be400610a0e565b831161105a576112b66112c36111086112bf6112bb6112a6996112ac60049b8c986112a161129a600261129361128c3390565b809e6105a9565b01956103b5565b80956105a9565b610c73565b9061076a565b95869160076105a9565b6105d7565b5090565b9490565b141590811561132d575b5061130e576003016112de81610606565b82106112ef576101a2929350610a1b565b610896846112fc60405190565b63b9f317a560e01b8152918291820190565b6108968461131b60405190565b63459808cf60e01b8152918291820190565b90506113566108bb61134960058501546001600160a01b031690565b926001600160a01b031690565b1415386112cd565b906101a293929161122b565b9061123f9392916113796110e8565b61140d565b634e487b7160e01b600052601160045260246000fd5b919082039182116113a157565b61137e565b634e487b7160e01b600052603160045260246000fd5b6101a291600091610ca1565b805480156113eb5760001901906113e86113e28383610c73565b906113bc565b55565b6113a6565b6001600160a01b0390911681526040810192916101a29160200152565b929190600061141b81610a0e565b841461106c57600491339361144d6112a6836112a1611446600261143f8b8b6105a9565b019b6103b5565b809b6105a9565b6114696111086114656112bb846112b68d60076105a9565b9390565b1415801561159a575b61130e5761148260038201610606565b42106112ef57846114d095938795936114b460018b95016112146114ae8a6114a984610606565b611394565b82610a1b565b6114c061110884610a0e565b14611508575b5050509050611f7d565b507fbace9fd79d5ea02ed8b43fa96af07e4e8f859a2f71ff878c748f5c22c578028491610fa26114ff60405190565b928392836113f0565b6115639061155a6115286101b8876002611522898c6105a9565b016105a9565b91610cdd6115536112a661154d61153d875490565b6115476001610a0e565b90611394565b86610c73565b9184610c73565b6111df816113c8565b61156f61110883610a0e565b1461157b575b806114c6565b61084261158b92611590956105a9565b6115ce565b5038858282611575565b5060058101546001600160a01b03166115bb6001600160a01b0387166108bb565b1415611472565b906101a293929161136a565b906115e961110861116961116460006101b89661115c600090565b61161a565b6101a291600091611173565b805480156113eb5760001901906113e86116148383610c73565b906115ee565b9061162b61121482600185016111ab565b60009261163784610a0e565b8214611684576101b89261168a94926116959261168f600197889361166461165e86610a0e565b82611394565b8885019161167c611673845490565b61154789610a0e565b82810361169a575b50505090565b6115fa565b016111ab565b6113bc565b6111a56116bd6116c5946116b46112a66111ea9589610c73565b92839188610c73565b8888016111ab565b388080611684565b90610b2f949392916116dd6110e8565b611790565b919082018092116113a157565b906101a26117776005611700610ad7565b9461171161170d82610606565b8752565b61172761172060018301610606565b6020880152565b61173d61173660028301610606565b6040880152565b61175361174c60038301610606565b6060880152565b61176961176260048301610606565b6080880152565b01546001600160a01b031690565b6001600160a01b031660a0840152565b6101b8906116ef565b50929392600091906117a183610a0e565b861461106c5760046117d16112a633946112a16117ca60026117c389886105a9565b01966103b5565b80966105a9565b6117ed6111086117e96112bb846112b68860076105a9565b9790565b14158015611860575b611853575061184b61183f6118378861181d6101b8999a611816306103b5565b8888611ee9565b506112146114ae60018a019261183284610606565b6116e2565b948601610606565b610f6d60038701610606565b0390a1611787565b6108969061131b60405190565b5060058501546001600160a01b03166118816001600160a01b0385166108bb565b14156117f6565b906101b8939291611897610b12565b6116cd565b939290936118b56101bb6000546001600160a01b031690565b6118be836103b5565b146119e0576004856118e56112a683986112a18660026115226118de3390565b80996105a9565b6118fd6111086117e96112bb846112b68960076105a9565b141580156119b8575b6119ab579582849261196c6101a298996119566119456101b861198a9960026119346101b860059e8c6105a9565b61193e8382611141565b50016105a9565b611950878c01610606565b90610cba565b61155a6115286101b8866002611522888b6105a9565b60009061197b61110883610a0e565b14611991575b505050506103b5565b910161097d565b61084261158b926119a1956105a9565b5038808080611981565b6108968761131b60405190565b5060058501546001600160a01b03166119d96001600160a01b0384166108bb565b1415611906565b60405163cf04b1bb60e01b8152600490fd5b9061123f939291611a016110e8565b611a75565b80151561018e565b905051906101a282611a06565b90602082820312610187576101b891611a0e565b909594926101a294611a65610d3092610d22608096611a5e60a088019c60008901906001600160a01b03169052565b6020870152565b6001600160a01b03166060830152565b919290611a8d610d946008546001600160a01b031690565b93600094611aa06108bb6101bb8861081f565b14611cce57611aae85610a0e565b831461106c576004913390611ae06112a6826112a1611ad96002611ad2888b6105a9565b019a6103b5565b809a6105a9565b611afc611108611af86112bb846112b68c60076105a9565b9590565b14158015611ca6575b61130e57611b20600184016112146114ae886114a984610606565b611b2c61110889610a0e565b14611c5c575b5063095ea7b36020611b6b611b52610d946008546001600160a01b031690565b92611b7588611b6060405190565b958694859460e01b90565b84528984016113f0565b03818a8a5af18015610fa757611c30575b50611b9c610d946008546001600160a01b031690565b91611bae600363b7df1d259201610606565b90611bc542611bbf62015180610a0e565b906116e2565b95843b15610187578896611bef948894611bf893611be260405190565b9b8c9a8b998a9860e01b90565b88528701611a2f565b03925af18015610fa757611c0a575050565b816101a292903d10611c29575b611c218183610a9c565b8101906102d4565b503d611c17565b611c509060203d8111611c55575b611c488183610a9c565b810190611a1b565b611b86565b503d611c3e565b611c769061155a6115286101b8896002611522888b6105a9565b611c8261110888610a0e565b14611c8e575b38611b32565b611ca08561158b8861084285886105a9565b50611c88565b5060058301546001600160a01b0316611cc76001600160a01b0384166108bb565b1415611b05565b604051632ed9bf5360e21b8152600490fd5b906101a29392916119f2565b6111df6101b891611cfb600090565b5060076105a9565b6101b860055b611d1f60006101b892611d1a600090565b500190565b60006101b891611d2d600090565b50015490565b6101b8906005611d4c565b611d4c565b6101b890610a0e565b611d71611d6c6101b893611d676000611d7695611d1a600090565b611d7b565b611d43565b610812565b6103ac565b6101b89160006112a692611d8d600090565b5001610c73565b611d0960006108426101b86101b894611dab600090565b5060046105a9565b90611d3e60006108426101b86101b895611dab600090565b6101b89160026115226101b86111df94611dab600090565b9291611e19916112b6611e116112a66112bb94611dfe600090565b506112a185600261152260049c8d6105a9565b9160076105a9565b91611e2383610606565b92611e3060018201610606565b93611e3d60028301610606565b93611e696005611e5a611e5260038701610606565b968601610606565b9401546001600160a01b031690565b91959493929190565b6001600160a01b039182168152911660208201526060810192916101a29160400152565b67ffffffffffffffff8111610abe57602090601f01601f19160190565b90611ec5611ec083611e96565b610ac3565b918252565b3d15611ee457611ed93d611eb3565b903d6000602084013e565b606090565b9091611f2b60009493611f1c8695611eff600090565b506040516323b872dd60e01b602082015294859360248501611e72565b60208201810382520382610a9c565b82602082019151925af1611f45611f40611eca565b911590565b611f4f5750600190565b8051611f5e6111086000610a0e565b14611f6b57805190602001fd5b6040516312171d8360e31b8152600490fd5b600092611f2b8493611f8d600090565b50611f1c611f9a60405190565b63a9059cbb60e01b6020820152938492602484016113f056fea26469706673582212209e535a12121118009ec3ce04b62ca09c7e5dd7992785bca52dfb2b489d496f8664736f6c63430008140033",
  "libraries": {
    "SafeTransfer": "0x8BBe425F6b6ac56D394E8c4315C6fB6ea3B92399"
  },
  "devdoc": {
    "author": "@neuro_0x",
    "details": "A contract for locking Uniswap V2 liquidity pool tokens for specified periods.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Creates a new LiquidityLocker contract",
        "params": {
          "_fee": "The fee amount to use",
          "_feeRecipient": "The address to send fees to"
        }
      },
      "getLockedTokenAtIndex(uint256)": {
        "details": "Get the address of a locked token at an index.",
        "params": {
          "_index": "The index of the token."
        }
      },
      "getNumLockedTokens()": {
        "details": "Get the total number of locked tokens"
      },
      "getNumLocksForToken(address)": {
        "details": "Get the number of locks for a specific token.",
        "params": {
          "_lpToken": "The address of the LP token."
        }
      },
      "getUserLockForTokenAtIndex(address,address,uint256)": {
        "details": "Get the lock for a specific user and token at an index.",
        "params": {
          "_index": "The index of the lock.",
          "_lpToken": "The address of the LP token.",
          "_user": "The address of the user."
        },
        "returns": {
          "_0": "The lock date.",
          "_1": "Amount of tokens locked.",
          "_2": "Initial amount of tokens locked.",
          "_3": "Unlock date of the lock.",
          "_4": "Lock ID of the lock.",
          "_5": "Owner of the lock."
        }
      },
      "getUserLockedTokenAtIndex(address,uint256)": {
        "details": "Get the token address a user has locked at an index.",
        "params": {
          "_index": "The index of the token.",
          "_user": "The address of the user."
        }
      },
      "getUserNumLockedTokens(address)": {
        "details": "Get the number of tokens a user has locked.",
        "params": {
          "_user": "The address of the user."
        }
      },
      "getUserNumLocksForToken(address,address)": {
        "details": "Get the number of locks for a specific user and token.",
        "params": {
          "_lpToken": "The address of the LP token.",
          "_user": "The address of the user."
        }
      },
      "incrementLock(address,uint256,uint256,uint256)": {
        "details": "increase the amount of tokens per a specific lock, this is preferable to creating a new lock, less fees, and faster loading on our live block explorer"
      },
      "lockLPToken(address,uint256,uint256,address)": {
        "details": "Creates a new lock",
        "params": {
          "amountOfLPToLock": "amount of LP tokens to lock",
          "lpToken": "the univ2 token address",
          "unlockDate": "the unix timestamp (in seconds) until unlock",
          "withdrawer": "the user who can withdraw liquidity once the lock expires"
        }
      },
      "migrate(address,uint256,uint256,uint256)": {
        "details": "migrates liquidity to uniswap v3"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "relock(address,uint256,uint256,uint256)": {
        "details": "extend a lock with a new unlock date, _index and _lockID ensure the correct lock is changed this prevents errors when a user performs multiple tx per block possibly with varying gas prices",
        "params": {
          "_index": "the index of the lock for the token",
          "_lockID": "the lockID of the lock for the token",
          "_lpToken": "the univ2 token address",
          "_unlockDate": "the new unix timestamp (in seconds) until unlock"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setFee(uint256)": {
        "details": "Set the fee amount",
        "params": {
          "amount": "The fee amount to use"
        }
      },
      "setFeeRecipient(address)": {
        "details": "Set the fee recipient",
        "params": {
          "feeRecipient_": "The address to send fees to"
        }
      },
      "setMigrator(address)": {
        "details": "Set the migrator contract which allows locked lp tokens to be migrated to uniswap v3",
        "params": {
          "_migrator": "The address of the migrator contract"
        }
      },
      "transferLockOwnership(address,uint256,uint256,address)": {
        "details": "transfer a lock to a new owner, e.g. presale project -> project owner"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address,uint256,uint256,uint256)": {
        "details": "withdraw a specified amount from a lock. _index and _lockID ensure the correct lock is changed this prevents errors when a user performs multiple tx per block possibly with varying gas prices"
      }
    },
    "title": "LiquidityLocker",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/LiquidityLocker.sol:LiquidityLocker",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 231,
        "contract": "src/LiquidityLocker.sol:LiquidityLocker",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6310,
        "contract": "src/LiquidityLocker.sol:LiquidityLocker",
        "label": "fee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6312,
        "contract": "src/LiquidityLocker.sol:LiquidityLocker",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6363,
        "contract": "src/LiquidityLocker.sol:LiquidityLocker",
        "label": "_users",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(User)6345_storage)"
      },
      {
        "astId": 6366,
        "contract": "src/LiquidityLocker.sol:LiquidityLocker",
        "label": "_lockedTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(AddressSet)2244_storage"
      },
      {
        "astId": 6372,
        "contract": "src/LiquidityLocker.sol:LiquidityLocker",
        "label": "tokenLocks",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_struct(TokenLock)6358_storage)dyn_storage)"
      },
      {
        "astId": 6375,
        "contract": "src/LiquidityLocker.sol:LiquidityLocker",
        "label": "migrator",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IUniswapV2Migrator)2852"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TokenLock)6358_storage)dyn_storage": {
        "base": "t_struct(TokenLock)6358_storage",
        "encoding": "dynamic_array",
        "label": "struct LiquidityLocker.TokenLock[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IUniswapV2Migrator)2852": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Migrator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(TokenLock)6358_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LiquidityLocker.TokenLock[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(TokenLock)6358_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_struct(User)6345_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LiquidityLocker.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)6345_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2244_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2243,
            "contract": "src/LiquidityLocker.sol:LiquidityLocker",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1929_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1929_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1924,
            "contract": "src/LiquidityLocker.sol:LiquidityLocker",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1928,
            "contract": "src/LiquidityLocker.sol:LiquidityLocker",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenLock)6358_storage": {
        "encoding": "inplace",
        "label": "struct LiquidityLocker.TokenLock",
        "members": [
          {
            "astId": 6347,
            "contract": "src/LiquidityLocker.sol:LiquidityLocker",
            "label": "lockDate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6349,
            "contract": "src/LiquidityLocker.sol:LiquidityLocker",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6351,
            "contract": "src/LiquidityLocker.sol:LiquidityLocker",
            "label": "initialAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6353,
            "contract": "src/LiquidityLocker.sol:LiquidityLocker",
            "label": "unlockDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6355,
            "contract": "src/LiquidityLocker.sol:LiquidityLocker",
            "label": "lockID",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6357,
            "contract": "src/LiquidityLocker.sol:LiquidityLocker",
            "label": "owner",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(User)6345_storage": {
        "encoding": "inplace",
        "label": "struct LiquidityLocker.User",
        "members": [
          {
            "astId": 6339,
            "contract": "src/LiquidityLocker.sol:LiquidityLocker",
            "label": "lockedTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)2244_storage"
          },
          {
            "astId": 6344,
            "contract": "src/LiquidityLocker.sol:LiquidityLocker",
            "label": "locksForToken",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}